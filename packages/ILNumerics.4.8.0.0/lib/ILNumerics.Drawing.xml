<doc>
  <assembly>
    <name>ILNumerics.Drawing</name>
  </assembly>
  <members>
    <member name="M:ILNumerics.Algorithms.Graphic.Triangularize(ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Int32},System.Int32,ILNumerics.ILOutArray{System.Single},ILNumerics.ILOutArray{System.Int32})">
      <summary>
            Increase the number of triangles by doubling existing triangles
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vertices">Vertices</param>
      <param name="indices">Triangle index definitions</param>
      <param name="iterations">Number of iterations, each iteration will make 4 triangles out of each triangle</param>
      <param name="outVertices">[Output] Vertices.</param>
      <param name="outTriangles">[Output] Triangles</param>
      <remarks>
        <para>Incoming triangles are expected to not be degenerated. This means:
            Every edge is used only twice at most. No triangle shares more than two
            corners with some other triangle. </para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.IILPickingResult">
      <summary>
            Interface for retrieving detailed picking data from shapes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>This interface derives from IDisposable. Therefore, objects 
            representing this interface should be disposed after use. It is recommended
            to use these objects in a using block (C#).</para>
        <para>Objects implementing this interface are returned from a call to <see cref="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" />.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <see cref="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" />
    </member>
    <member name="P:ILNumerics.Drawing.IILPickingResult.NextVertex">
      <summary>
            Vector of row indices of the vertices in <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesScreen" /> 
            and <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesWorld" /> which are closest to the mouse position
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The memory layout of <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesScreen" /> 
            and <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesWorld" /> store the vertices of each primitive found during picking 
            in slices of n x 3 elements along the 3rd dimension, where n corresponds to <see cref="P:ILNumerics.Drawing.ILShape.VerticesPerPrimitive" />.
            <see cref="P:ILNumerics.Drawing.IILPickingResult.NextVertex" /> gives the row index of the vertex for each primitive which is closest to the mouse location.
            This is useful in order to find the vertex which is closest to the mouse for marking operations and the like.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <seealso cref="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" />
    </member>
    <member name="P:ILNumerics.Drawing.IILPickingResult.PrimitiveIDs">
      <summary>
            Unordered collection of primitive indices found during picking
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>Every index in <see cref="P:ILNumerics.Drawing.IILPickingResult.PrimitiveIDs" /> corresponds to one primitive in the 
            target which was found during picking to exist under the mouse cursor. The index
            reflects the index of the primitive in a regular rendering process.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "P:ILNumerics.Drawing.IILPickingResult.VerticesScreen" -->
    <!-- Badly formed XML comment ignored for member "P:ILNumerics.Drawing.IILPickingResult.VerticesWorld" -->
    <member name="T:ILNumerics.Drawing.ILDriver">
      <remarks>Abstract driver base class for all output driver implementations<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.IILDriver">
      <summary>
            Interface for all driver implementations, most common implementor is System.Drawing.ILDriver
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILDriver.Configure">
      <summary>
            Configures the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILDriver.Render(System.Int64)">
      <summary>
            Trigger a frame rendering at a specific point in time
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="timeMs"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILDriver.GetCurrentScene(System.Int64)">
      <summary>
            Return a scene which reflects the rendering result, including all local compositions and modifications
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILDriver.Supports(ILNumerics.Drawing.Capabilities)">
      <summary>
            Reserved for future use
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Capability"></param>
      <returns>True if the driver is able to support the requested capability</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILDriver.PickAt(System.Drawing.Point,System.Int64)">
      <summary>
            Performs picking on the current local scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="screenCoords">position in screen coordinates (pixels)</param>
      <param name="timeMS">the time at which the scene is picked at</param>
      <returns>If an object is visible at the given position, its ID is returned. Otherwise null is returned.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.IILDriver.BeginRenderFrame">
      <summary>
            Must fire befor a frame is rendered
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.IILDriver.EndRenderFrame">
      <summary>
            Must fire after the frame was rendered
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.IILDriver.RenderingFailed">
      <summary>
            Fires, when an unrecoverable error occoured during rendering
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.IILDriver.FPSChanged">
      <summary>
            Fires when the current framerate has changed.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.IILDriver.Timeout">
      <summary>
            Time after which rendering is cancelled if not completed. Default: 0 (no limit)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDriver.DrawNode(ILNumerics.Drawing.ILDrawable,ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            Default implementation, simply print out a copy of all shapes data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="node">the shape to draw</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDriver.ComputeLight(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3,System.Single,System.Drawing.Color,System.Drawing.Color,ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            vertex based lighting equations (Lambert' + Gauss)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="col">Diffuse color</param>
      <param name="pos">position (camera coords)</param>
      <param name="normal">normal (camera coords, properly scaled)</param>
      <param name="Emission">emissive color</param>
      <param name="Shininess">shininess exponent</param>
      <param name="Specular">specular color</param>
      <param name="parameters">render parameter</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDriver.BeginRender(ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            Fires the OnBeginRenderFrame event
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="renderParams"></param>
      <remarks>This is not guaranteed to be called in certain scenarios. Do not rely on this function to be called for important driver setups! Use BeginRenderPass instead. <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPickingDriver.#ctor(ILNumerics.Drawing.ILScene,ILNumerics.Drawing.ILGroup,ILNumerics.Drawing.ILDrawable,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Create picking driver
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPickingDriver.PrimitiveIDs">
      <summary>
            List of indices of primitives found which are crossed by the ray through the given picking position
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPickingDriver.VerticesScreen">
      <summary>
            Ordered collection of screen coords for the vertices of matching primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The vertices of all primitives below the mouse cursor is given as ordered collection. 
            The storage scheme depends on the number of vertices per primitive used by the shape. For <code>ILTriangles</code> 
            the scheme is as follows: 
            <para><code>Vertex3  // closest vertex of closest triangle
            Vertex3  // 2nd closest vertex of closest triangle
            Vertex3  // 3rd vertex of closest triangle
            </code></para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPickingDriver.VerticesWorld">
      <summary>
            3-dimensional array with detailed vertex and picking information
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>VerticesWorld provides detailed data about all primitives hit. The shape 
            and content of the matrix varies depending on the type of shape targeted.</para>
        <para>For triangular shapes the matrix layout is as follows: </para>
        <code></code>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPickingDriver.NextVertex">
      <summary>
            3-dimensional array with detailed vertex and picking information
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>VerticesWorld provides detailed data about all primitives hit. The shape 
            and content of the matrix varies depending on the type of shape targeted.</para>
        <para>For triangular shapes the matrix layout is as follows: </para>
        <code></code>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSVGDriver.#ctor(System.IO.Stream,System.Int32,System.Int32,ILNumerics.Drawing.ILScene,System.Nullable{System.Drawing.Color})">
      <summary>
            Create SVG driver
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="outStream">output stream to write SVG data into</param>
      <param name="width">the SVG artwork width</param>
      <param name="height">the SVG artwork height</param>
      <param name="scene">[optional] the scene to render. If null: a new scene will be created</param>
      <param name="BackColor">[optional] background color. On null: System.Drawing.Color.White is used.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSVGDriver.RenderTriangleSVG(ILNumerics.Drawing.ILRenderParameter,System.Text.StringBuilder,ILNumerics.Drawing.Triangle,ILNumerics.Drawing.ILTriangles)">
      <summary>
            compute ligthing and do recursive subdivisioning for a single triangle for rendering
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameters">current render parameters</param>
      <param name="sb">string builder for writing output to</param>
      <param name="tri">triangle</param>
      <param name="triangles">original triangles shape (for color computations)</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.LegendMode">
      <summary>
            Modes determining how a legend collects its items
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.LegendMode.Auto">
      <summary>
            Automatically collect and add all items found
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.LegendMode.Manual">
      <summary>
            Complete manual configuration for legends
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Units">
      <summary>
            Unit scales for lengths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Units.Pixels">
      <summary>
            The length/ coordinate is measured in screen pixels 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Units.Points">
      <summary>
            The length/ coordinate is measured in points 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Units.Viewport">
      <summary>
            The length/ coordinate is measured relative to the current viewport size, range [0...1]
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.AspectRatioMode">
      <summary>
            modes for projecting the rendering output to the available client area
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.AspectRatioMode.StretchToFill">
      <summary>
            plots fill available rendering area of the PlotCubeScreenRectF rectangle
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.AspectRatioMode.MaintainRatios">
      <summary>
            plots will be shrinked to fit inside PlotCubeScreeRectF but maintain data aspect ratio
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.ZoomModes">
      <summary>
            transition from current to new zoom setting
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ZoomModes.Jump">
      <summary>
            No ramp, jump to new zoom setting
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ZoomModes.RollSoft">
      <summary>
            morph softly to new zoom setting
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ZoomModes.RollHard">
      <summary>
            morph faster to new setting
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ZoomModes.RollOverride">
      <summary>
            morph to new setting by 'going over the limit'
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Colormaps">
      <summary>
            predefined colormaps
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.SortingMode.None">
      <summary>
            No sorting
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.SortingMode.BackToFront">
      <summary>
            BackToFront
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.SortingMode.FrontToBack">
      <summary>
            FrontToBack
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.AxisNames">
      <summary>
            Names for all axes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.AxisNames.XAxis">
      <summary>
            The X axis
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.AxisNames.YAxis">
      <summary>
            The Y axis
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.AxisNames.ZAxis">
      <summary>
            The Z axis
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.AxisNames.CAxis">
      <summary>
            Custom axis or color scale
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.AxisScale">
      <summary>
            Axis ticks spacing type: linear, logarithmic
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.AxisScale.Linear">
      <summary>
            Linear axis tick spacing
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.AxisScale.Logarithmic">
      <summary>
            Logarithmic axis tick spacing
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.TickMode">
      <summary>
            TickModes - automatic or manual axis tick positioning
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.TickMode.Auto">
      <summary>
            find tick positions automatically 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.TickMode.Manual">
      <summary>
            manually create ticks 
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.PlotBoxScreenSizeMode">
      <summary>
            options for the sizing of the projection of the plot cube onto the 2D screen client area of the control
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.PlotBoxScreenSizeMode.Maximum">
      <summary>
            the projection of the plot cube drawing area fills the whole controls space (labels may be hidden) 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.PlotBoxScreenSizeMode.Optimal">
      <summary>
            the size of plot cube projection rectangle is automatically determined, taking labels size into account
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.PlotBoxScreenSizeMode.StrictOptimal">
      <summary>
            more pixel exact positioning, strictly only the place really needed for labels is used (slower)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.PlotBoxScreenSizeMode.Manual">
      <summary>
            No automatic resizing for the cube projection size, values from PlotCubeScreenRect are taken
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Projection">
      <summary>
            projection types
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Projection.Perspective">
      <summary>
            3D graphs will be distorted for opotimized 3D impression
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Projection.Orthographic">
      <summary>
            graphs will not be distorted. objects in the front will get the same size as objects in the back
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.MarkerStyle">
      <summary>
            valid marker styles (partially supported)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Dot">
      <summary>
            draw markers as dots
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Circle">
      <summary>
            draw markers as circle
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Diamond">
      <summary>
            draw markers as diamonds
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Square">
      <summary>
            draw markers as square
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Rectangle">
      <summary>
            draw markers as a flat rectangle
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.TriangleUp">
      <summary>
            draw markers as up pointing triangles
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.TriangleDown">
      <summary>
            draw markers as up pointing triangles
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.TriangleLeft">
      <summary>
            draw markers as up pointing triangles
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.TriangleRight">
      <summary>
            draw markers as up pointing triangles
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Plus">
      <summary>
            draw markers as plus
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Cross">
      <summary>
            draw markers as cross
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.MarkerStyle.Custom">
      <summary>
            user defined marker shape
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.CameraQuadrant">
      <summary>
            Possible positions of the camera
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.DashStyle">
      <summary>
            line style
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.DashStyle.Solid">
      <summary>
            solid line
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.DashStyle.Dashed">
      <summary>
            dashed line
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.DashStyle.PointDash">
      <summary>
            point dashed line
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.DashStyle.Dotted">
      <summary>
            dotted line
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.DashStyle.UserPattern">
      <summary>
            use user stipple pattern 
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.InteractiveModes">
      <summary>
            modes of mouse interaction with ILPanel
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.RenderTarget">
      <summary>
            Target coordinate system for objects like labels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.RenderTarget.Screen2DNear">
      <summary>
            The object is rendered above Screen2DFar and World3D objects; 2D screen coordinate system: [0,0,-1] -&gt; [1,1,1]
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.RenderTarget.Screen2DFar">
      <summary>
            The object is rendered above Screen2DFar and World3D objects; 2D screen coordinate system: [0,0,-1] -&gt; [1,1,1]
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.RenderTarget.World3D">
      <summary>
             (default) The object is rendered as regular 3D object; coordinate system range: [-1,-1,-1] -&gt; [1,1,1]
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.RenderItemType">
      <summary>
            possible types of renderable items
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.RenderItemType.Character">
      <summary>
            the item defines a character 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.RenderItemType.Bitmap">
      <summary>
            the item defines a bitmap
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.CullFaces">
      <summary>
            Options for face culling (specific drivers only)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.CullFaces.CW">
      <summary>
            Faces defined in clockwise order are culled 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.CullFaces.CCW">
      <summary>
            Faces defined in counter-clockwise order are culled
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.CullFaces.None">
      <summary>
            No faces are culled
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.SceneTypes">
      <summary>
            Scene types, used to determine, where a node is hosted.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.SceneTypes.Global">
      <summary>
            The global scene holds the main shapes and plots and is shareable between drivers/controls.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.SceneTypes.Local">
      <summary>
            Adresses the local part of a scene, which is 'private' to every driver
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILImageSCPlot">
      <summary>
            A plotting class used for visualizing matrix shaped data with colormapped tiles
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILGroup">
      <summary>
            ILGroup holds and manages arbitrary nodes and serves as base class for custom visual object implementations
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILNode.GetRoot">
      <summary>
            Find the root of the current node in this scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>The root node of the current scene node or the node itself, if it is a group node</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILNode.Copy">
      <summary>
            Copy of this node, for general use in the tree description.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Shallow copy of this node /subtree.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILNode.Synchronize(ILNumerics.Drawing.ILNode,ILNumerics.Drawing.ILSyncParams)">
      <summary>
            Synchronize all changes of this node/subtree with another node/subtree.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="copy">Destination node</param>
      <param name="syncParams">Synchronization parameters</param>
      <returns>Synchronized version of this node</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILNode.BeginVisit(ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            handle transformations before visiting the node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameter">render parameter instance</param>
      <returns>true if the node requires further processing, false: skip this node for the current rendering attempt</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.PropertyChanged">
      <summary>
            Fires on any property state changes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.Disposing">
      <summary>
            Fires, before the node is getting disposed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseEnter">
      <summary>
            Fires when the mouse enters the object region
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseLeave">
      <summary>
            Fires when the mouse leaves the object region
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseClick">
      <summary>
            Fires when the object is clicked
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseDoubleClick">
      <summary>
            Fires when the object was double clicked
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseDown">
      <summary>
            Fires when a mouse button was pressed over the object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseUp">
      <summary>
            Fires when a mouse button was released over the object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseMove">
      <summary>
            Fires when the mouse was moved over the object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILNode.MouseWheel">
      <summary>
            Fires when the mouse wheel was moved over the object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.SourceID">
      <summary>
            The source node ID when this node was created by Copy()
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.SynchedVersion">
      <summary>
            The version of the sync source from the last synchronization.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Version">
      <summary>
            Modification version of this node, gets incremented at every change
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.PickingID">
      <summary>
            If set to a valid shape ID, that shape will be marked in picking operations insted of this shape.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Parent">
      <summary>
            Get the parent of this node or null, if this node is a root node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Visible">
      <summary>
            Determines, if this node is visible or sets the visible state
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Tag">
      <summary>
            Object tag used to identify the node within the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.ID">
      <summary>
            Unique ID for the node within the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Marked">
      <summary>
            Marked state for the node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILNode.Markable">
      <summary>
            Determines, if this node can be marked by the user
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.#ctor(System.Object,System.Nullable{ILNumerics.Drawing.Vector3},System.Double,System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.RenderTarget})">
      <summary>
            Creates a new empty group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">tag object, used to identify the node within the scene</param>
      <param name="angle">rotation angle for groups children</param>
      <param name="rotateAxis">rotation axis for groups children</param>
      <param name="scale">X, Y and Z scale for groups children</param>
      <param name="translate">translation for groups children</param>
      <remarks>If specified, the transformations are applied in that order: scale, translate, rotate.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.#ctor(ILNumerics.Drawing.ILGroup)">
      <summary>
             create a new group as shallow copy of a subtree, shared buffers
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source">source subtree</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Find(System.Object,System.Nullable{ILNumerics.Drawing.Primitives})">
      <summary>
            Searches the subtree for nodes with matching tag and (optional) primitive type
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">tag filter</param>
      <param name="kind">kind (optional)</param>
      <returns>collection of matching nodes</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.First``1(System.Object,System.Predicate{``0})">
      <summary>
            Gets first node with matching criteria from subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">node type to filter for</typeparam>
      <param name="tag">tag filter (optional); case insensitive search, matches all tags which _contain_ the expression! If omitted, all tags are accepted</param>
      <param name="predicate">arbitrary predicate function (optional); if omitted, all nodes are accepted</param>
      <returns>first node, which matches all given criteria</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Find``1(System.Object,System.Predicate{``0})">
      <summary>
            Searches the subtree for all nodes with matching criteria
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">node type to filter for</typeparam>
      <param name="tag">tag filter (optional); case insensitive search, matches all tags which _contain_ the expression! If omitted, all tags are accepted</param>
      <param name="predicate">arbitrary predicate function (optional); if omitted, all nodes are accepted</param>
      <returns>all nodes, with matching criteria or null</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.FirstUp``1(System.Object,System.Predicate{``0})">
      <summary>
            Finds a group node on the path up to root
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">The concrete type of the node</typeparam>
      <param name="key">tag filter, leave null to match all tags</param>
      <param name="predicate">arbitrary predicate, leave null to match any node</param>
      <returns>The first node which matches the filter criteria is returned. If no matching node was found, null is returned. </returns>
      <remarks>The functions startes with the current node and walks up to the root of the scene. The first node found which matches the given filter is returned.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.FindById``1(System.Int32)">
      <summary>
            Finds a typed node in this subtree, filter by ID
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="id">ID filter</param>
      <returns>matching node or null</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Configure(System.Boolean,System.Boolean)">
      <summary>
            Configure the subtree after changes to any buffer
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Dispose">
      <summary>
            Dispose the complete subtree (this is rarely needed)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Rotate(ILNumerics.Drawing.Quaternion)">
      <summary>
            Rotate this subtree by quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="offset">Quaternion, describing the target orientation</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Rotate(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Rotate this subtree by rotation axis and angle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="directionX">rotation axis X coordinate</param>
      <param name="directionY">rotation axis Y coordinate</param>
      <param name="directionZ">rotation axis Z coordinate</param>
      <param name="angle">angle in radians</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Rotate(ILNumerics.Drawing.Vector3,System.Double)">
      <summary>
            Rotate this subtree by rotation axis and angle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="direction">rotation axis</param>
      <param name="angle">angle in radians</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Translate(System.Double,System.Double,System.Double)">
      <summary>
            Translates this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">Offset in X direction</param>
      <param name="y">Offset in Y direction</param>
      <param name="z">Offset in Z direction</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Translate(ILNumerics.Drawing.Vector3)">
      <summary>
            Translates this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">Offset vector</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Scales this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">scale factor in X direction</param>
      <param name="y">scale factor in Y direction</param>
      <param name="z">scale factor in Z direction</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Scale(ILNumerics.Drawing.Vector3)">
      <summary>
            Scales this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">vector with scale factors in X, Y and Z direction</param>
      <returns>this group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.BeginVisit(ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            pushes the transform, alpha and color overrides of this node to the render parameter stack
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameter"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.EndVisit(ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            pops the render parameter from render parameter stack
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameter"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Add(ILNumerics.Drawing.ILNode)">
      <summary>
            Add a node to the end of this groups child collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">node type</typeparam>
      <param name="node">node object</param>
      <param name="tag">tag for the newly added node (optional)</param>
      <param name="shareBuffers">[optional] if adding creates a clone, determines, if its buffer are shared. Default: true</param>
      <returns>the newly added node</returns>
      <remarks>If the <paramref name="node" /> given is already used within any scene graph a (shallow, lazy) copy is made and the copy is added to the group instead. Such copies are 
            individually configurable in most scalar properties. However, they (by default) share the buffer sets - i.e. vertices, indices, normals and interpolating colors buffers.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Add``1(``0,System.Object,System.Boolean)">
      <summary>
            Add a node to the end of this groups child collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">node type</typeparam>
      <param name="node">node object</param>
      <param name="tag">tag for the newly added node (optional)</param>
      <param name="shareBuffers">[optional] if adding creates a clone, determines, if its buffer are shared. Default: true</param>
      <returns>the newly added node</returns>
      <remarks>If the <paramref name="node" /> given is already used within any scene graph a (shallow, lazy) copy is made and the copy is added to the group instead. Such copies are 
            individually configurable in most scalar properties. However, they (by default) share the buffer sets - i.e. vertices, indices, normals and interpolating colors buffers.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Insert``1(System.Int32,``0,System.Object)">
      <summary>
            Insert a node into the child collection at predefined index
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">node type</typeparam>
      <param name="index">index to place the new node at</param>
      <param name="node">node object</param>
      <param name="tag">tag for the newly added node (optional)</param>
      <returns>the newly added node</returns>
      <remarks>If the <paramref name="node" /> given is already used within any scene graph a (shallow, lazy) copy is made and the copy is added to the group instead. Such copies are 
            individually configurable in most scalar properties. However, they (by default) share the buffer sets - i.e. vertices, indices, normals and interpolating colors buffers.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Remove(ILNumerics.Drawing.ILNode)">
      <summary>
            Remove a node from this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="node">node to remove</param>
      <returns>true if the node was found and successfully removed, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Detach">
      <summary>
            Detach all shapes from this subtree for individual configurations
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.GetLimits(System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)">
      <summary>
            Compute the 3D limits (extent) of this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="lowerBound">The lower limit of the search.</param>
      <param name="includeRootTransform">True: take this groups Transform property into account; false: ignore this group, while computing the limits (default)</param>
      <returns>Limits of the bounding box which contains all nodes in this subtree</returns>
      <remarks>The function walks the complete subtree and computes the extent for every shape contained. 
            Group node transformations are taken into account and the limits of the bounding box for all nodes is returned.
            <para>For every axis, only those positions 
            from shape vertices are considered, which lay <i>above</i> the bound determined by <paramref name="lowerBound" />. 
            This parameter is usefull for working with logarithmic axes scales. If ommited, all data are taken into account [Default].</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.ToString">
      <summary>
            String representation of the group node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>string summarizing this group node</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGroup.Copy">
      <summary>
            Create a shallow copy of this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>copy of this subtree</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.InternalChildren">
      <summary>
            Access to direct children, safe even for derived classes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This property gives safe access to the internal node collection of children. Since a derived class 
            may change the Children property semantic, this property ensures the access to the original collection.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Target">
      <summary>
            If set, determines the target for rendering: world (3D) or screen (2D) on top. Default: not set (derive from parent)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Screen components are drawn <b>on top</b> of World (3D) content. Per default, nodes derive the target setting from their parent. The root node of a scene graph is set to World (3D), so by default, all nodes are drawn as World targets.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.TimeoutAware">
      <summary>
            Sets if this group and all children are sensible for timeouts during rendering or gets that flag. Default: null -&gt; derive from parent
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>Commonly, the rendering of any nodes in a scene is cancelled once a timeout was set and the rendering 
            took too long. However, it is possible to exclude some nodes / subtrees from the cancellation by setting this 
            flag to false on the root of the nodes to exclude. All children below the group having this flag set to false
            will render regardless of a timeout occoured.</para>
        <para>By default, this flag is null, which means that the value if derived from the parent node.</para>
        <para>Use with care! When used too excessively on large nodes, obviously, the rendering cannot timeout successfully 
            (in time) which may cause UI to become less responsive. This flag is usually utilized on small nodes or individual 
            labels only. The label which informs the user of a timeout is one example.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Clipping">
      <summary>
            Gets all 6 available clipping planes for the group or sets it. Null: derive clipping from parent node (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Transform">
      <summary>
            [4x4] matrix with the affine transforms which this node applies to all children
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Children">
      <summary>
            Collection of child for this group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Childs">
      <summary>
            Collection of child for this group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.Alpha">
      <summary>
            Alpha value, range [0...1],  if set, this value modifies the alpha values for ALL nodes of this subtree. Use for blend effects only!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGroup.ColorOverride">
      <summary>
            If set, this color will override all individual colors in this subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.IILAxisDataProvider.GetRangeMinValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Gets the lower limit of the axis scale range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">The type / name of the axis</param>
      <returns>the lower limit</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.IILAxisDataProvider.GetRangeMaxValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Gets the upper limit of the axis scale range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">The type / name of the axis</param>
      <returns>the upper limit</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.IILAxisDataProvider.ScaleMode(ILNumerics.Drawing.AxisNames)">
      <summary>
            Gets the scale mode of the axis (log / linear)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">The type / name of the axis</param>
      <returns>AxisScale enum value</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.IILAxisDataProvider.ID">
      <summary>
            ID of this provider, used to identify the object within a scene graph
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.IILColormapProvider.Colormap">
      <summary>
            Gets the current colormap or null, if no colormap is active or used
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.IILColormapProvider.IsColormapped">
      <summary>
            Determines, if the colormap is currently in use
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.IILColormapProvider.Tag">
      <summary>
            Tag used to identify or label this provider object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILImageSCPlot.#ctor(ILNumerics.ILBaseArray,ILNumerics.Drawing.Colormaps,System.Tuple{System.Single,System.Single},System.Object)">
      <summary>
            Create new ImageSC plot, optionally providing colormap and/or data range for color mapping
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">numeric matrix with data to plot</param>
      <param name="colormap">[optional] colormap used to map values to colors. Default: Colormaps.ILNumerics</param>
      <param name="minMaxDataRange">[optional] data range used to find the color range for values in <paramref name="Z" />. Default: null (take the limits of Z)</param>
      <param name="tag">[optional] tag used to identify the plot in the scene graph</param>
      <remarks>
        <para>ImageSC plots visualize the values of a matrix as colored rectangle/square tiles. The color of a tile and its height (i.e. Z-coordinate) corresponds 
            to the position of the values in the colormap used.</para>
        <para>
          <h2>Distinction between ImageSC and Surface plots</h2>
            ImageSC plots are less costly and less restrictive then surface plots. While a surface interprets the values of a matrix as grid points and connects the area between the grid points 
            with linear interpolation, imagesc plots do not interpolate. Instead, every value is visualized as individual tile, the color reflects the value of the element. Adjacent values are 
            not connected in any way. Therefore, imagesc plots do not require the data matrix to contain at least two columns or rows (as for surface plots). It rather allows for any shape of the 
            data matrix (even empty matrices).</para>
        <para>While ImageSC plots are intended to be used as 2D representation of a matrix, the tiles composing the elements of the matrix were given a height (z-coordinate) value 
            according to their value in the matrix. Therefore, by rotating the plot in a 3D setup, allows the anticipation of the 'height map' defined by the matrix elements. However, ImageSC is 
            optimized for speed and does not connect the tiles to its neighboring tiles. Hence, the visibility is limited, when watching the imagesc plot from the side.</para>
        <para>In order to control the mapping of element values to colors within the colormap, next to the <paramref name="colormap" /> argument, the <paramref name="minMaxDataRange" /> argument 
            is used. It allows the definition of the maximum value and the minimum value which are to be mapped to the maximum and minimum value of the colormap correspondingly. If no value is 
            given (default) the maximum and minimum values of <paramref name="Z" /> are used. In that case, the full colormap is addressed by the element values of <paramref name="Z" />.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILImageSCPlot.Update(ILNumerics.ILBaseArray,ILNumerics.Drawing.Plotting.ILColormap,System.Tuple{System.Single,System.Single})">
      <summary>
            Update the existing plot with new data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">data</param>
      <param name="colormap">Colormap used for coloring the tiles</param>
      <param name="minMaxDataValues">data value range provided as tuple, specifies the data range for coloring</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILImageSCPlot.Tiles">
      <summary>
            Gets a reference to the triangles shape used to realize the tiles of the ImageSC plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILImageSCPlot.Colormap">
      <summary>
            Gets the colormap used for mapping values to colors or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILImageSCPlot.MinMaxDataRange">
      <summary></summary>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILStaticColormapProvider">
      <summary>
             This class is used to provide static colormap data to colorbars.
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Use this class in order to provide colormap information to colorbars at runtime. This is useful in a setup where colorbars are 
             to be used in conjunction with custom objects (and not with predefined plot objects like surface or contour plots). 
             <para><see cref="T:ILNumerics.Drawing.Plotting.ILStaticColormapProvider" /> is given to <see cref="P:ILNumerics.Drawing.Plotting.ILColorbar.ColormapProvider" /> and used at runtime by the colorbar
             to retrieve the needed information.</para><para>[ILNumerics Visualization Engine]</para></remarks>
      <example>
        <code><![CDATA[We need to provide colormap data to the colorbar at runtime. 
                    // We simply take a static colormap provider here:
                    var cmProv = new ILStaticColormapProvider(Colormaps.ILNumerics, 0, 1);
                    // Position data for plotting
                    ILArray<float> A = ILMathInternal.tosingle(ILMathInternal.rand(3, 1000));
                    // create the points
                    ilPanel1.Scene.Add(
                        new ILPlotCube(twoDMode: false) {
                            new ILPoints("myPoints") {
                                Positions = A,
                                // since we want to show a colorbar, we need to put the points colors under colormap control
                                Colors = cmProv.Colormap.Map(A["1;:"]).T,
                                // deactivate single color rendering
                                Color = null
                            },
                            // add the colorbar (somewhere) and give it the colormap provider
                            new ILColorbar() {
                                ColormapProvider = cmProv
                            }
                        }); ]]></code>
      </example>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.GetRangeMinValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the lower range for colorbar limits
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">(ignored)</param>
      <returns>lower range as defined for this object in the constructor</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.GetRangeMaxValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the upper range for colorbar limits
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">(ignored)</param>
      <returns>upper range as defined for this object in the constructor</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.ScaleMode(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the needed scale mode for the colorbar axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">(ignored)</param>
      <returns>The scale mode as provided at construction time.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.#ctor(ILNumerics.Drawing.Plotting.ILColormap,System.Single,System.Single,ILNumerics.Drawing.AxisScale)">
      <summary>
            Create new static colormap provider for supporting colorbars for custom objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="colormap">ILColormap object or Colormaps enumeration</param>
      <param name="min">lower limit for the colorbar axis</param>
      <param name="max">upper limit for the colorbar axis</param>
      <param name="axisScale">[Optional] Axis scaling; Default: linear</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.Colormap">
      <summary>
            Colormap used for mapping values to colors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.IsColormapped">
      <summary>
            Always returns true
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.Tag">
      <summary>
            Always returns a constant tag: "StaticColormapProvider"
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILStaticColormapProvider.ID">
      <summary>
            ID of this provider (always 0)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.TripodStyle">
      <summary>
            Available styles for the ILTripod class.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.TripodStyle.Tripod3D">
      <summary>
            Create a full featured 3D tripod, utilizing light.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.TripodStyle.TripodSimple">
      <summary>
            Draw a simple shape out of lines. (Not implemented yet.)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.TripodStyle.TripodEmpty">
      <summary>
            Do not draw any shapes for the tripod, allowing the user to add custom shapes.
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.ILTripod">
      <summary>
            The tripod class adds support for rotation displays to arbitrary scenes.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>A tripod visualizes the state of rotation of a subscene. The camera rotation is visualized by a small 
            tripod, showing the current direction of X, Y and Z axes. The tripod rotation automatically follows the rotation 
            of the main camera. Any translational or scaling /zoom transforms happening on the corresponding subscene are ignored.
            <para>The tripod is attached to a main camera by adding the ILTripod class as a child to that camera. From now on the 
            tripod will follow its rotation. Note that the tripod does not need to be a direct child of the camera. The tripod will 
            recognize the rotation of the first camera which it finds on the path up to the root of the scene. </para><para>ILTripod allows the full configuration flexibility of regular cameras: ScreenRect is used 
            to define the screen rectangle the tripod is occupying. AspectRatio, Projection and even arbitrary Transforms can be configured as well.</para><para>ILTripod provides some interactive capabilities: It allows to zoom in / out with the mouse wheel when the mouse is 
            over the tripod. When the user drags the mouse with the left mouse button, the corresponding scene is rotated. If the dragging starts 
            on one of the three axis identifier (the X-, Y- or Z-arrow with the Arrow3D style or the X-,Y- or Z label for the simple style) 
            the rotation will become restricted to that specific axis only. When the Shift key is down, all interactions are greatly slowed down by a factor of 10. The interaction
            can be disabled for the end user by setting the <see cref="P:ILNumerics.Drawing.ILCamera.AllowZoom" /> and <see cref="P:ILNumerics.Drawing.ILCamera.AllowRotation" /> properties of the base class to false.</para><para>One can use ILTripod as starting point for own custom tripod implementation. The constructor parameter <see cref="M:ILNumerics.Drawing.ILTripod.#ctor(System.Object,ILNumerics.Drawing.TripodStyle,ILNumerics.Drawing.CameraQuadrant,System.Single)" />
            'style' is used to define the style of the tripod. Set this to Empty in order to get an empty tripod group, keeping 
            its functionality: It will rotate its (arbitrary) content according to the parent camera transformation. The example below
            demonstrates how this could be used to get an interactive thumbnail of a scene or parts of it. Another example is found in the Tripod_Configuration example.</para><para>[ILNumerics Visualization Engine]</para></remarks>
      <example>
        <code title="Default Tripod" language="CSharp">
            private void ilPanel1_Load(object sender, EventArgs e) {
                // some simple scene
                ilPanel1.Scene.Camera.Add(new ILSphere());
                // add a tripod to the scene, following the main scenes rotation
                ilPanel1.Scene.Camera.Add(new ILTripod()); 
            }
            </code>
        <code title="Custom Tripod - create a shrinked copy of the main scene" language="CSharp"><![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // Create and add some scene content. We wrap it into a group just to 
                // have the scene available for easier copying later. 
                var group = ilPanel1.Scene.Camera.Add(new ILGroup() {
                    Shapes.Sphere2, Shapes.Gear25, Shapes.Gear25Wireframe
                }); 
                
                // Create and add a tripod right to the main camera. It could be added to any other camera as well.
                // Set the tripod style empty in order to prevent the standard (Arrow3D based) tripod to show up. 
                ilPanel1.Scene.Camera.Add(new ILTripod(style: TripodStyle.TripodEmpty) {
                    
                    // place the tripod to upper left corner
                    ScreenRect = new RectangleF(0.05f, 0.05f, 0.1f, 0.1f),
                    
                    // the tripod could be configured independently
                    //AspectRatioMode = ILNumerics.Drawing.AspectRatioMode.StretchToFill,
                    
                    // Add custom content to the tripod: a scaled copy of the above scene
                    Children = { 
                        new ILGroup(scale: new Vector3(.5,0.5,0.5)) { group }
                    }
                }); 
            }
            ]]></code>
      </example>
    </member>
    <member name="T:ILNumerics.Drawing.ILCamera">
      <summary>
            This class specifies the camera's positioning and orientation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILCamera.Default">
      <summary>
            Default camera instance 
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.OnPropertyChanged(System.String)">
      <summary>
            Fires a Changed event
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.#ctor(ILNumerics.Drawing.ILCamera)">
      <summary>
            Create new camera, copy settings from existing camera
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source">source camera</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.#ctor(System.Object)">
      <summary>
            Creates a new camera
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.ToString">
      <summary>
            Convert all camera parameter to string
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>string display: polar coordinates, position, lookat points and top vector</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.Rotate(ILNumerics.Drawing.Quaternion)">
      <summary>
            Rotate the camera position based on the rotation stored in a quarternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="rotation">rotation</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.RotateX(System.Double,System.Nullable{ILNumerics.Drawing.Vector3})">
      <summary>
            Move the camera position forward around the look at point, keep the same distance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="offset">angle in radians</param>
      <param name="anchor">[optional] the center for the rotation. Default: null (look at point)</param>
      <remarks>
        <para>The camera is seen as moving on the surface of a sphere. The center of the sphere is the lookat point. 
            RotateX rotates the position of the camera around an imaginary x axis which runs through the look at point – parallel 
            to the axis through the camera from left to right.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.RotateY(System.Double,System.Nullable{ILNumerics.Drawing.Vector3})">
      <summary>
            Rotate the camera position to the left / rigth around the look at point, keep the same distance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="offset">angle in radians</param>
      <param name="anchor">[optional] the center for the rotation. Default: null (look at point)</param>
      <remarks>
        <para>The camera is seen as moving on the surface of a sphere. The center of the sphere is the lookat point. 
            RotateY rotates the position of the camera around an imaginary y axis which runs through the look at point – parallel 
            to the cameras Top vector.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.RotateZ(System.Double,System.Nullable{ILNumerics.Drawing.Vector3})">
      <summary>
            Rotate the camera around the vector connecting the camera position with the center of rotation.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="offset">angle in radians</param>
      <param name="anchor">[optional] the center for the rotation. Default: null (rotate around the look at point)</param>
      <remarks>This rotation is by default activated when holding down the CTRL key on mouse rotations on common ILPanel scenes. 
            <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCamera.Move(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            Move the camera position according to a distance given in clip coordinates
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="startClip">starting point (clip coordinates)</param>
      <param name="endClip">end point (clip coordinates)</param>
      <remarks>This function is used for panning operations.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.AllowPan">
      <summary>
            Enable or disable the ability to move the camera content with right mouse dragging. Default: true (enabled)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.AllowZoom">
      <summary>
            Enable or disable the ability to zoom the camera content. Default: true (enabled)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.AllowRotation">
      <summary>
            Enable or disable the ability to rotate the camera content. Default: true (enabled)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ZoomFactor">
      <summary>
            Gets the zoom factor for this camera or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The zoom factor determins, how close objects appear to the camera. Value for ZoomFactor can range from 0.001 ... to 1000. Lower value correspond to the scene appearing closer, higher values correspond to higher overview. A Value of 1.0 is considered as "no zoom".</para>
        <para>This value is by default set to 1. It gets modified when the user scrolls with the mouse wheel on scene objects which are contained within a regular ILCamera group object.</para>
        <para>Custom mouse handlers / zoom actions can be implemented by altering this value programmatically.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ScreenRect">
      <summary>
            Screen rectangle identifying the area this object is using inside its container (0..1/0..1, get/set)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.IsGlobal">
      <summary>
            Determine if this camera is acting on the global scene. Changes made to one driver will affect all instances of the same camera/scene for all drivers.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Changes to a camera by user interaction do by default affect the synchronized scene copy within every driver only. In a multi-panel setup 
            instances of the same global scene are prevented from getting altered by interacting with the camera of another driver. Use <see cref="P:ILNumerics.Drawing.ILCamera.IsGlobal" />
            if such interactive changes are supposed to modify the global scene and hence are to be populated to all drivers sharing the same scene.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.Projection">
      <summary>
            Get the type of projection (orthographic/ perspective) or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ZNear">
      <summary>
            Near clipping limit (Z axis)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ZFar">
      <summary>
            Far clipping limit (Z axis)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.LookAt">
      <summary>
            Point, the camera is aiming at (world coords)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.Position">
      <summary>
            Get/set camera position, absolute cartesian coordinates
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Keep in mind, the angle for phi points towards negative Y axis! The cartesian property 
            <paramref name="Position" /> handles the camera position in absolute world coordinates, while the 
            polar coordinates (Rho, Phi, Distance) supress the camera position by means of coordinates 
            relative to the LookAt point (i.e. usually the center of the viewing cube)!<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.Top">
      <summary>
            Orientation of the camera, normalized, readonly
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This vector is readonly always points 'upwards'.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.m_phiDebugDisp">
      <summary>
            debugger helper: display phi in degrees (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.m_rhoDebugDisp">
      <summary>
            debugger helper: display rho in degrees
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.Polar">
      <summary>
            Spherical coordinates relative to the look at point
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.Is2DView">
      <summary>
            True, when looking from top on the un-rotated scene (common for 2D plots)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.AspectRatioMode">
      <summary>
            Determines, if objects keep their shape, regardless from the windows aspect ratio. Default: maintain ratios
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.FieldOfView">
      <summary>
            Determines the field of view for perspective projection. Small: more fish eye effect, large: more overview. Default: 10
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.PositionTransform">
      <summary>
            Get position transform matrix (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ProjectionTransform">
      <summary>
            Get projection transform matrix (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCamera.ViewTransform">
      <summary>
            Gets the view transformation matrix mapping the rendering area for this camera (ScreenRect) to clip coordinates (readonly).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILTripod.DefaultTag">
      <summary>
            The tag used to identify the tripod within a scene.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILTripod.XArrowDefaultTag">
      <summary>
            The tag used to identify the X axis specific content of the tripod.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILTripod.YArrowDefaultTag">
      <summary>
            The tag used to identify the Y axis specific content of the tripod.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILTripod.ZArrowDefaultTag">
      <summary>
            The tag used to identify the Z axis specific content of the tripod.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILTripod.#ctor(System.Object,ILNumerics.Drawing.TripodStyle,ILNumerics.Drawing.CameraQuadrant,System.Single)">
      <summary>
            Create a new tripod to be added to a camera
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">[Optional] Tag used to identify the tripod object in a scene.</param>
      <param name="style">[Optional] The tripod style. Default: TripodStyle.Tripod3D</param>
      <param name="location">[Optional] Determines where to place the tripod. One of the 8 quadrants from the CameraQuadrant enumeration. Default: BottomLeftFront</param>
      <param name="size">[Optional] the size in relative viewport units occupied by the tripod. Default: 1/3</param>
      <remarks>
        <para>This constructor creates a new tripod object which is ready to be added to any camera in the scene. It will follow its rotation then.</para>
        <para>The <paramref name="style" /> parameter determines the visual style for the tripod. Available styles are: Simple - a tripod which is made out of 3 lines as 
            X,Y and Z axis and 3 corresponding labels; 'Tripod3D' renders a tripod which shows individually colored 3D arrows for the X, Y and Z axis along with the labels X, Y and Z. 
            'Empty' allows one to use ILTripod as starting point for own custom tripod implementations. No content for the axes will be added but the tripod group will keep 
            its functionality: Any content which is manually added will be rotated according to the parent camera transformation.</para>
        <para>The <paramref name="location" /> parameter places the tripod in any of the 8 quadrants of the scene: top/bottom/right/left. The third dimension is back/front: 
            front will make the tripod to always stay on top of the main content. 'Back' will embed the tripod into the scene and allow the scene content to hide the tripod.</para>
        <para>The size of the tripod will be specified by the <paramref name="size" /> parameter. It computes the area the tripod is using from the corresponding camera viewport. 
            A value of 1 would occupy the whole viewport. Default is one third.</para>
        <para>It is possible to give the tripod a custom location and size by configuring the <see cref="P:ILNumerics.Drawing.ILCamera.ScreenRect" /> parameter for the tripod. This gives full flexibility
            on where to place the tripod and its size. Keep in mind, tripods are derived from <see cref="T:ILNumerics.Drawing.ILCamera" />, hence provide the full set of configuration options a regular camera brings.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTripod.Copy">
      <summary>
            Create a shallow copy of this object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTripod.XArrow">
      <summary>
            Gets the group implementing the content which is specific for the X axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTripod.YArrow">
      <summary>
            Gets the group implementing the content which is specific for the Y axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTripod.ZArrow">
      <summary>
            Gets the group implementing the content which is specific for the Z axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILArrow3D">
      <summary>
            The class assembles a simple 3D arrow out of several 3D shapes.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The arrow head is assembled out of a cone, a disc and a lines shape for the border of the arrow head. The body is made out of a cylinder, a disc and a line for the bottom border. 
            <para>The arrow has a body length of 1, a bottom radius of 1 with the midpoint at the origin, the head of radius 1.5 and a height of 0.4.</para><para>All parts of the arrow are seperately accessible and configurable by individual properties: <see cref="P:ILNumerics.Drawing.ILArrow3D.ConeHull" />, <see cref="P:ILNumerics.Drawing.ILArrow3D.ConeBorder" />, 
            <see cref="P:ILNumerics.Drawing.ILArrow3D.ConeBottom" />, <see cref="P:ILNumerics.Drawing.ILArrow3D.Body" />, <see cref="P:ILNumerics.Drawing.ILArrow3D.Bottom" />, <see cref="P:ILNumerics.Drawing.ILArrow3D.BottomBorder" />. Head and body are placed into seperate group node, 
            so they can get transformed arbitrarly.</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILArrow3D.Copy">
      <summary>
            Create a shallow copy of this arrow, sharing buffers.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.ConeHull">
      <summary>
            Gets access to the triangles shape constructing the cone hull of the arrow head.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.ConeBorder">
      <summary>
            Gets access to the lines shape constructing the cone border of the arrow head.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.ConeBottom">
      <summary>
            Gets access to the triangles shape constructing the bottom of the cone for the arrow head.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.Body">
      <summary>
            Gets access to the triangles shape constructing the cylinder hull of the arrow body.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.Bottom">
      <summary>
            Gets access to the triangles shape constructing the bottom of the arrow body.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.BottomBorder">
      <summary>
            Gets access to the lines shape constructing the border around the bottom of the arrow body.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.HeadGroup">
      <summary>
            Gets access to the group node containing the shapes for the head for individual configuration.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILArrow3D.BodyGroup">
      <summary>
            Gets access to the group node containing the shapes for the body for individual configuration.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCircle.Resolution">
      <summary>
            Gets the resolution used for the creation of the circle (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Padding">
      <summary>
            Redefinition of the padding struct, prevents from Windows.Forms dependency.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Positioning">
      <summary>
            Positioning constants for screen objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.TopLeft">
      <summary>
            Place the object at the upper left corner
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.TopCenter">
      <summary>
            Place the object in the upper center
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.TopRight">
      <summary>
            Place the object at the upper right corner
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.MiddleLeft">
      <summary>
            Place the object vertically centered at the left edge
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.MiddleCenter">
      <summary>
            Place the object centered on the viewport
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.MiddleRight">
      <summary>
            Place the object vertically centered at the right edge
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.BottomLeft">
      <summary>
            Place the object at the lower left corner
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.BottomCenter">
      <summary>
            Place the object centered at the lower edge
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Positioning.BottomRight">
      <summary>
            Place the object at the lower right corner
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.ILTitle">
      <summary>
            Title object for labeling scenes in ILNumerics Visualization Engine
            </summary>
      <remarks>Title objects are screen objects which are used to label a scene.
            <para>Titles are created with a white, slightly transparent background, a thin, gray border and a regular label, 
            centered in the title object. The size of the title automatically adopts to the size of the text displayed by the label.</para><para>ILTitle allows for the convenient positioning within the viewport. 9 predefined <see cref="T:ILNumerics.Drawing.Positioning" /> values exist and 
            can be specified at construction time. By default, titles are placed in the upper right corner of the viewport.</para><para>The value specified for the initial position does affect the initial values of <see cref="P:ILNumerics.Drawing.ILScreenObject.Location" /> and <see cref="P:ILNumerics.Drawing.ILScreenObject.Anchor" /> 
            of the title only. It is possible to overwrite those properties with user defined values in order to position the title arbitrarily.</para><seealso cref="T:ILNumerics.Drawing.ILScreenObject" /><see href="http://ilnumerics.net/world3d-and-screen2d-nodes.html" /><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILScreenObject">
      <summary>
            Screen oriented rectangle with viewport relative position and size ([0..1])
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>Screen objects are used for labels, legends, colorbars a.t.l. Unlike regular 3D objects, screen objects represent 
            a subtree of arbitrary objects which are always rendered on top of regular 3D nodes. Therefore, objects contained within 
            a screen object will appear on top of the rest of the scene in the rendered output.</para>
        <para>ILScreenObjects come with basic interactive capabilities: they can be dragged around with the mouse.</para>
        <para>Screen objects allow absolut values (pixels) or relative values (fraction of the panel size) for their size. They create 
            a local coordinate system ranging from [0..1] in X and Y and allowing for the easy placement of objects like labels and lines.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScreenObject.#ctor(System.Object,System.Single,System.Single)">
      <summary>
            Creates a new screen object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag"></param>
      <param name="minWidth"></param>
      <param name="minHeight"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.ZCoord">
      <summary>
            Gets or sets the Z coordinate for this screen object. Childs will take this as base depth value.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Movable">
      <summary>
            Dis-/allows the user to move the rectangle on screen interactively (if supported by the driver). Default: true
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Border">
      <summary>
            Border of the screen rectangle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Background">
      <summary>
            Background fill area
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Anchor">
      <summary>
            Gets the reference point for the location of the screen rectangle relative to the rectangles size. Default: center of the rectangle (.5,.5)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Location">
      <summary>
            Location of the anchor point of the screen rectangle in units defined by LocationXUnit and LocationYUnit. Default: viewport center
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Width">
      <summary>
            Width of the screen rectangle in units defined by WidthUnit. Default: Auto (null); determined by content
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.Height">
      <summary>
            Height of the screen rectangle in units defined by HeightUnit. Default: Auto (null); determined by content
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.MinimumSize">
      <summary>
            Minimum size of the screen rect when Size mode is null (auto), in units defined by WidthUnit and HeightUnit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.LocationXUnit">
      <summary>
            Units for the horizontal location of the anchor point
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.LocationYUnit">
      <summary>
            Units for the vertical location of the anchor point
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.WidthUnit">
      <summary>
            Units for the width of the screen rectangle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScreenObject.HeightUnit">
      <summary>
            Units for the height of the screen rectangle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILTitle.DefaultTitleTag">
      <summary>
            Default tag used to identify the title object within the scene
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILTitle.DefaultLabelTag">
      <summary>
            Default tag used to identify the label of the title within the scene
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILTitle.#ctor(ILNumerics.Drawing.ILTitle)">
      <summary>
            Copy constructor
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source">source title object to create a copy from</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTitle.#ctor(System.String,ILNumerics.Drawing.Positioning,System.Object)">
      <summary>
            Create a new title object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="text">[Optional] The text for the title object. Default: 'Title'</param>
      <param name="position">[Optional] one of the predefined positioning values. See: <see cref="T:ILNumerics.Drawing.Positioning" />. Default: <see cref="F:ILNumerics.Drawing.Positioning.TopRight" /></param>
      <param name="tag">[Optional] Tag used to identify the title in the scene. Default: <see cref="F:ILNumerics.Drawing.ILTitle.DefaultTitleTag" /></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTitle.Synchronize(ILNumerics.Drawing.ILNode,ILNumerics.Drawing.ILSyncParams)">
      <summary>
            Synchronize (internal use only)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="copy"></param>
      <param name="syncParams"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTitle.Copy">
      <summary>
            Create a Copy of this object (internal use only, use ILNode.Add() in order to duplicate scene objects)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Copy of this title object an its content</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTitle.Label">
      <summary>
            Gives a reference to the label used to render the title text
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTitle.Padding">
      <summary>
            Gets the labels padding within the title or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics_Licensing.ILLicHelper_c4c276c0d58c4985ad85c3eab74723c2_">
      <summary>
            This type supports ILNumerics infrastructure. Do not edit the code!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This type is automatically generated by ILNumerics Ultimate VS. If you encounter problems compiling this file, make sure to reference ILNumerics.Core in your project!<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Data.BSPPrimitive`1">
      <summary>
            Primitive struct for BSP tree nodes; may refer to labels, points, lines or triangles
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.BSPPrimitive`1.Interpolate(System.Int32,System.Int32,System.Single,ILNumerics.Data.Vertex@)">
      <summary>
            Derive a new vertex on an edge of this primitive by interpolating from vertices at both ends
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">first vertex ID</param>
      <param name="b">second vertex ID</param>
      <param name="t">fraction between a and b; range [0..1]</param>
      <param name="storage">target vertex struct to store the results into</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.BSPPrimitive`1.GetVertexAt(System.Int32)">
      <summary>
            Retrieve individual vertex from the primitive by index
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="idx">index; range 0 .. VertexCount</param>
      <returns>Vertex with position, color and normal information. If colors or normals are not defined in the original shape, default values are returned.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.BSPPrimitive`1.GetPlane">
      <summary>
            Create plane from this primitive Positions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Plane</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.BSPPrimitive`1.ToString">
      <summary>
            String representation for this primitive
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Primitive description</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Data.ILBSPNode`1">
      <summary>
            A node within the BSP tree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.ILBSPNode`1.ToString">
      <summary>
            Create string representation of this node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.ILBSPNode`1.Count">
      <summary>
            Compute the number of primitives within the node and subtree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Primitives count</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPNode`1.Front">
      <summary>
            Collection of front primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPNode`1.Back">
      <summary>
            Collection of back primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPNode`1.Plane">
      <summary>
            Dividing plane
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPNode`1.Primitives">
      <summary>
            Collection of on-plane primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Data.BSPTreeHint">
      <summary>
            Possible values, influencing the BSP tree creation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.ILBSPTreeSettings.#ctor">
      <summary>
            Creates a new settings instance with default paramters.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPTreeSettings.PlaneThickness">
      <summary>
            Split planes are considered 'thick' in order to handle floating point inaccuracies. Default: single precision eps
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPTreeSettings.Hint">
      <summary>
            Determines if the tree favors balancing and runtime speed over creation speed. Default: fast creation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPTreeSettings.BalanceSplitRatio">
      <summary>
            For Hint.FastRunning mode: the ratio between a balanced tree and minimal necessary primitive splits. Default: 0.86
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Data.ILBSPTree`1">
      <summary>
            Binary Space Partioning (BSP) tree class
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">Data type for BSP tree nodes</typeparam>
      <remarks>The class is used on several places withing ILNumerics. One example is the preparation of scenes for rendering in SVG driver.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Data.ILBSPTree`1.#ctor(System.Collections.Generic.IEnumerable{ILNumerics.Data.BSPPrimitive{`0}},ILNumerics.Data.ILBSPTreeSettings)">
      <summary>
            Create new BSP tree, given the list of primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="primitives">individual, prebuild primitives </param>
      <param name="settings">[optional] settings for tuning the tree creation. Default: default instance</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Data.ILBSPTree`1.GetSorted(ILNumerics.Drawing.Vector3,System.Boolean)">
      <summary>
            Retrieve all primitives from the BSP tree, spatially sorted order; for use in foreach loops
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="cameraPosition">Current camera position</param>
      <param name="back2Front">[optional] Flag determining the sort order: back to front (default) or front to back</param>
      <returns>individual sorted primitives</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPTree`1.Random">
      <summary>
            Thread static random generator
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Data.ILBSPTree`1.Root">
      <summary>
            Root node of the tree
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Animation.ILBlendAnimation.Reset">
      <summary>
            Resets the local clock to the end of the blendin ramp
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Animation.ILInterpolator`1.InterpolateInternal(System.Int32,System.Int64)">
      <summary>
            the actual interpolation between two keyframes, concrete class can rely on ms laying between two existing keyframes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="keyframeStartIDX">the index of the keyframe _before_ ms </param>
      <param name="ms">current time</param>
      <returns>interpolated value for ms</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILClock.#ctor">
      <summary>
            Creates a new clock and start it running
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILClock.TimeMilliseconds">
      <summary>
            Gets or sets the current time of the clock in milliseconds or sets
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILClock.Running">
      <summary>
            Gets the current running state of the clock or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILBufferBase.Disposing">
      <summary>
            Fires before the buffer gets disposed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILBufferBase.Changed">
      <summary>
            Fires once the buffer has been changed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBufferBase.DataLength">
      <summary>
            Dimensionality of a single date in this buffer (number of rows or length of each vector)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILBuffer`1.#ctor(System.Int32)">
      <summary>
            Creates a new empty buffer.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBuffer`1.Storage">
      <summary>
            returns a copy(!) of the buffers array storage, using a lazy-copy-on-write scheme. Use Update() for modifications!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBuffer`1.DataCount">
      <summary>
            Number of data vectors (columns)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBuffer`1.DataLength">
      <summary>
            Dimensionality of a single date in this buffer (number of rows or length of each vector)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBuffer`1.ReferenceCount">
      <summary>
            Number of objects currently using this buffer
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILBufferSet.Copy">
      <summary>
            Creates (lazy) copy of this buffer set which allows local changes without affecting referenced buffer sets
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Buffer sets are copied only, if a copy is explicitely requested. This happens once the user calls ILShape.Detach().<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBufferSet.ID">
      <summary>
            Globally unique ID for the buffer set
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILPositionsBuffer">
      <summary>
            Buffer holding and managing position vertex data for shapes.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.#ctor">
      <summary>
            Create a new empty positions buffer.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.GetPositionAt(System.Int32)">
      <summary>
            Retrieves the vertex position at a specific index.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="i">index in range 0...DataCount</param>
      <returns>Vector3 with position vertex data from index <paramref name="i" /></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.Copy">
      <summary>
            Create and return (lazy) copy of this position buffer.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Lazy copy of this position buffer.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.op_Implicit(ILNumerics.ILInArray{System.Single})~ILNumerics.Drawing.ILPositionsBuffer">
      <summary>
            Conversion operator allowing the assignment of ILArray{float} to position buffer members.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">Float element typed ILArray</param>
      <returns>Positions buffer with elements of A</returns>
      <remarks>
        <para>A must have exactly 3 rows.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <exception cref="T:ILNumerics.Exceptions.ILArgumentException">is thrown if A does not have 3 rows.</exception>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.op_Implicit(ILNumerics.ILRetArray{System.Single})~ILNumerics.Drawing.ILPositionsBuffer">
      <summary>
            Conversion operator allowing the assignment of ILArray{float} to position buffer members.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">Float element typed ILArray</param>
      <returns>Positions buffer with elements of A</returns>
      <remarks>
        <para>A must have exactly 3 rows.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <exception cref="T:ILNumerics.Exceptions.ILArgumentException">is thrown if A does not have 3 rows.</exception>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.op_Implicit(ILNumerics.ILArray{System.Single})~ILNumerics.Drawing.ILPositionsBuffer">
      <summary>
            Conversion operator allowing the assignment of ILArray{float} to position buffer members.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">Float element typed ILArray</param>
      <returns>Positions buffer with elements of A</returns>
      <remarks>
        <para>A must have exactly 3 rows.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <exception cref="T:ILNumerics.Exceptions.ILArgumentException">is thrown if A does not have 3 rows.</exception>
    </member>
    <member name="M:ILNumerics.Drawing.ILPositionsBuffer.op_Implicit(System.Single[0:,0:])~ILNumerics.Drawing.ILPositionsBuffer">
      <summary>
            Conversion operator allowing the assignment of 2 dimensional system array float[,] to position buffer members.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">Float element typed ILArray</param>
      <returns>Positions buffer with elements of A</returns>
      <remarks>
        <para>A must have exactly 3 columns.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <exception cref="T:ILNumerics.Exceptions.ILArgumentException">is thrown if A does not have 3 columns.</exception>
    </member>
    <member name="P:ILNumerics.Drawing.ILPositionsBuffer.UnitCubeLighting">
      <summary>
            Gets position buffer for a unit cube, capable of getting lit.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPositionsBuffer.UnitCube">
      <summary>
            Gets position buffer of a simple shaded unit cube.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILControlBridge.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILControlBridge.Dispose(System.Boolean)">
      <summary>
 
            Clean up any resources being used.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILControlBridge.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGDIControl.GetCurrentScene(System.Int64)">
      <summary>
            Return a scene which reflects the rendering result, including all local compositions and modifications
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ms">[optional] time of render frame</param>
      <returns>scene composition as copies of local and global scene with user interaction</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILGDIControl.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILGDIControl.Dispose(System.Boolean)">
      <summary>
 
            Clean up any resources being used.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGDIControl.InitializeComponent">
      <summary>
 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGDIControl.Clock">
      <summary>
            Gets the clock which provides the time base for animations
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILGDIControl.Timeout">
      <summary>
            Time after which rendering is cancelled if not completed. Default: 0 (no limit)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILMouseEventArgs">
      <summary>
            Extends common MouseEventArgs for event processing for ILNumerics scenes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.Cancel">
      <summary>
            True: event processing will be canceled after this node and not get populated further down or up.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.ShiftPressed">
      <summary>
            Determines if the SHIFT key is currently pressed (ignored on Mac)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.ControlPressed">
      <summary>
            Determines if the CTRL key is currently pressed (ignored on Mac)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.AltPressed">
      <summary>
            Determines if the ALT key is currently pressed (ignored on Mac)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.TimeMS">
      <summary>
            The global scene time when the event was raised
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILMouseEventArgs.Refresh">
      <summary>
            Signals the driver to redraw the scene after processing the event; default: false
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILMouseEventArgs.ToString">
      <summary>
            Create string representing this ILMouseEventArgs object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>String representation</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILMouseEventArgs.LocationF">
      <summary>
            The mouse position relative to the current viewport; range [0...1]
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILMouseEventArgs.Target">
      <summary>
            The final target node for the event, commonly the node under the mouse cursor
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILMouseEventArgs.DirectionUp">
      <summary>
            Gives the direction of event; false: capture (down), true: bubbling (up)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILMouseEventArgs.Empty">
      <summary>
            Creates an empty ILMouseEventArgs instance
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLControl.GetCurrentScene(System.Int64)">
      <summary>
            Return a scene which reflects the rendering result, including all local compositions and modifications
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ms">[optional] time of render frame</param>
      <returns>scene composition as copies of local and global scene with user interaction</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLControl.Clock">
      <summary>
            Gets the clock which provides the time base for animations
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLControl.Timeout">
      <summary>
            Time after which rendering is cancelled when not completed. (Not supported for OpenGL renderer)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILPanel">
      <summary>
            The main Windows.Forms rendering panel in ILNumerics, supports various drivers
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.Render(System.Int64)">
      <summary>
            Trigger the rendering of a complete frame
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="timeMs"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.Configure">
      <summary>
            Configure panel and scene after modifications to any buffers
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.Supports(ILNumerics.Drawing.Capabilities)">
      <summary>
            [Reserved for future use]
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Capability">Capability to query</param>
      <returns>True if this driver supports the capability requested, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)">
      <summary>
            Pick primitive(s) below specific screen position
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="drawable">The shape to pick the primitive from</param>
      <param name="point">Windows coordinates of the point to pick</param>
      <param name="time">[Optional] time frame for rendering (for animations only)</param>
      <param name="ignoreLogAxis">[Optional] true: never log() vertex data returned, even for logaritmic log axis scales. Default: false</param>
      <returns>Interface giving access to detailed information of the primitive(s) found</returns>
      <remarks>
        <para>
          <see cref="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" /> finds all primitives below the position given in <paramref name="point" /> which belong to the 
            drawable object specified in <paramref name="drawable" />. In difference to <see cref="M:ILNumerics.Drawing.ILPanel.PickAt(System.Drawing.Point,System.Int64)" /> which 
            only finds the <b>drawable</b>, i.e. the shape or the label below the window position, <see cref="M:ILNumerics.Drawing.ILPanel.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" /> 
            finds all primitives within that drawable. This allows the identification of individual tiles (triangles), line segments and individual 
            points of arbitrary shapes. Detailed information is given for the primitives found, including vertex data in object and screen coordinates,
            order of the primitives relative to the camera and interpolated position data.</para>
        <para>If <paramref name="drawable" /> is null, a regular picking operation is performed first in order to identify the closest drawable 
            object under <paramref name="point" /> and the primitives are picked from that afterwards.</para>
        <para>
          <paramref name="point" /> is expected in window (pixel) coordinates. All mouse events provide the window position in the 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Location" /> property. Note, that the origin (0,0) for window coordinates lays in the upper left corner 
            of the window.</para>
        <para>If the drawable is displayed in the context of a plot cube with <a href="axis-configuration.html#logarithmic-scales">logarithmic axis scales</a>
            the vertex data returned are also logarithmic. Therefore, they reflect the rendered position rather than the original data specified for the object. 
            If this is not intended, one can set the <paramref name="ignoreLogAxis" /> flag to true and the data returned in <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesWorld" />
            will correspond to the actual data specified by the user and not be logarithmic. Note that the vertex screen data returned in 
            <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesScreen" /> will always correspond to the logarithmic representation in that context, regardless of 
            the setting of <paramref name="ignoreLogAxis" />.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <example>
        <code><![CDATA[
            using System;
            using System.Collections.Generic;
            using System.ComponentModel;
            using System.Data;
            using System.Drawing;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            using System.Windows.Forms;
            using ILNumerics; 
            using ILNumerics.Drawing; 
            using ILNumerics.Drawing.Plotting;
            using ILNumerics.Exceptions; 
            
            
            namespace WindowsFormsApplication3 {
                
                // Picking Example. The application creates a surface in a plot cube. It registers several event handler 
                // demonstrating the picking of primitives and the interactive manipulation of the scene to display 
                // the picking results. A small blue dot is moving below the mouse at interpolated positions. A larger red dot 
                // is placed at the nearest vertex to the mouse. Hovering over the red dot displays a tool tip with the position 
                // value of the vertex in a screen overlay.  
                //
                // Create a new WindowsForms application and paste the content of the following class into it. Start the application
                // and move the mouse over the surface. Watch the values and positions of the red and blue dot change. Hover 
                // over the red dot. A tool tip window is shown displaying the values of its position. 
                public partial class Form1 : Form {
                    public Form1() {
                        InitializeComponent();
                    }
            
                    // attributes: red point marking vertices, blue for interpolated value
                    ILPoints m_pointsRed, m_pointsBlue;
                    // a screen object is used as tool tip label
                    ILScreenObject m_labelObj;  
                    
                    // this is the regular panel load event handler
                    private void ilPanel1_Load(object sender, EventArgs e) {
                        // setup objects
                        m_pointsRed = new ILPoints("MarkVertex") {
                            Color = Color.Red,
                            Size = 10
                        };
                        m_pointsBlue = new ILPoints("MarkPosition") {
                            Color = Color.Blue,
                            Size = 3
                        };
                        // the tooltip label is placed inside an ILScreenObject
                        m_labelObj = new ILScreenObject("LabelObj") {
                            Children = { 
                                new ILLabel(tag: "Label") {
                                    // centered in the screen object
                                    Position = new Vector3(.5f,.5f,0),
                                    Anchor = new PointF(.5f,.5f)
                                }
                            },
                            // disable interactive movement of the screen object
                            Movable = false,
                            // displace slightly away from the mouse 
                            Anchor = new PointF(-0.05f,-0.05f),
                            Width = 150,
                            Height = 30,
                            Visible = false
                        }; 
                        // create some test data
                        ILArray<float> C = ILSpecialData.sincf(20, 30, 3);
                        C["2:5;10:14"] = 1;  // make it more interesting
            
                        // add objects to the scene
                        ilPanel1.Scene.Add(new ILPlotCube(twoDMode: false) {
                            new ILSurface(C),
                            // dots and tool tip go into a seperated  group
                            // so we can render them on top of the surface
                            new ILGroup(target: RenderTarget.Screen2DFar) { 
                                m_pointsRed, m_pointsBlue, m_labelObj
                            }
                        });
                        // wire up events 
                        ilPanel1.Scene.First<ILSurface>().MouseMove += ilSurface1_MouseMove;
                        m_pointsRed.MouseEnter += m_pointsRed_MouseEnter;
                        m_pointsRed.MouseLeave += m_pointsRed_MouseLeave;
                    }
            
                    void m_pointsRed_MouseEnter(object sender, ILMouseEventArgs e) {
                        // fetch reference to the tool tip label
                        var label = m_labelObj.First<ILLabel>(tag: "Label");
                        if (label != null) {
                            // display the position of the red dot in the tool tip
                            label.Text = m_pointsRed.Positions.GetPositionAt(0).ToString();
                            m_labelObj.Location = e.LocationF;
                            m_labelObj.Visible = true;
                            // always need to Configure() after changes
                            m_labelObj.Configure();
                            // redraw the scene
                            ilPanel1.Refresh();
                        }
                    }
                    void m_pointsRed_MouseLeave(object sender, ILMouseEventArgs e) {
                        m_labelObj.Visible = false;
                        // always need to Configure() after changes
                        m_labelObj.Configure();
                        // redraw the scene
                        ilPanel1.Refresh();
                    }
            
                    void ilSurface1_MouseMove(object sender, ILMouseEventArgs e) {
                        // perform picking of the primitives below the cursor
                        using (var pick = ilPanel1.PickPrimitiveAt(e.Target as ILDrawable, e.Location)) {
                            
                            // TODO: we do not check for pick containing data for triangles here. In 
                            // a production environment, you must do all common checks!
            
                            try {
                                // Move the red dot to nearest vertex. pick.NextVertex[0] gives the 
                                // index for the closest primitive in pick.VerticesWorld (row index). 
                                // "0:2" addresses the X,Y and Z values for the vertex in the corrresponding row. 
                                // The third dimension '0' means: the first primtive, which will always be the 
                                // one closest to the camera. 
                                m_pointsRed.Positions.Update(pick.VerticesWorld[pick.NextVertex[0], "0:2", 0][":"]);
                                // compute interpolated point: use the barycentric coordinates provided in 
                                // Vertices["0,1;3;0"] in order to interpolate any value over the triangle 
                                // for the picked point. 
                                float s = pick.VerticesWorld.GetValue(0, 3);
                                float v = pick.VerticesWorld.GetValue(1, 3);
                                // The third barycentric coordinate is not stored. You can compute it easily 
                                // using the following formula: 
                                float t = 1 - s - v;
                                // interpolate: here, we interpolate the position 
                                ILArray<float> interp = pick.VerticesWorld["0;0:2;0"] * s
                                                      + pick.VerticesWorld["1;0:2;0"] * v
                                                      + pick.VerticesWorld["2;0:2;0"] * t;
                                m_pointsBlue.Positions.Update(interp[":"]);
                                Text = interp.GetValue(2).ToString();
                                m_pointsRed.Configure();
                                m_pointsBlue.Configure();
                                ilPanel1.Refresh();
                            } catch (ILArgumentException) { }
                        }
                    }
                }
            }
            ]]></code>
      </example>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.GetCurrentScene(System.Int64)">
      <summary>
            Returns a scene which reflects the rendering result, including all local compositions and modifications
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ms">[optional] time of render frame</param>
      <returns>scene composition as copies of local and global scene, including user interactions and auto generated shapes (ticks, camera etc.)</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.PickAt(System.Drawing.Point,System.Int64)">
      <summary>
            Determines the ID of the shape according to a specific pixel position inside the Rectangle output area at a specific point in time
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="screenCoords">pixel coords, (0,0) is at upper left corner</param>
      <param name="timeMs">the point in time for rendering</param>
      <returns>the id of the shape which exists at the given screen coordinates, null if no such shape exists</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILPanel.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.Dispose(System.Boolean)">
      <summary>
 
            Clean up any resources being used.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPanel.InitializeComponent">
      <summary>
 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILPanel.FPSChanged">
      <summary>
            Fires when the number of rendered frames per second changes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILPanel.BeginRenderFrame">
      <summary>
            Fires when the rendering of a frame was started
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILPanel.EndRenderFrame">
      <summary>
            Fires when the rendering of a frame was finished
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILPanel.RenderingFailed">
      <summary>
            Fires when the rendering of a frame failed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.IsDesignMode">
      <summary>
            Replacement for Control.DesignMode which also works in the constructor of this control
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Clock">
      <summary>
            The clock providing the frequency / current time for the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.ShowUIControls">
      <summary>
            [Reserved for future use] Determines if extended interactive UI controls are shown at runtime
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Editor">
      <summary>
            [Reserved for future use]
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.FPS">
      <summary>
            Gets the current frame rate (frames per second) when the clock is running
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Timeout">
      <summary>
            Time after which rendering is cancelled if not completed. Default: 0 (no limit)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.BackColor">
      <summary>
            Get the back color of the control or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Camera">
      <summary>
            Get a reference to the default camera of the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Scene">
      <summary>
            Gets a reference to the initial, global scene or sets it.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Rectangle">
      <summary>
            Gets the rectangular area which this panel occupies inside its container control or sets that rectangle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.ViewTransform">
      <summary>
            Get the rectangular area as fraction of the area defined by Rectangle, which is used to render the scene to. ViewTransform Matrix4.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.Driver">
      <summary>
            Gets the driver used to render the scene to the rendering surface or sets it. Default: OpenGL, fallback: GDI
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.LocalScene">
      <summary>
            Gets the scene which is only maintained by this panel and not shared between multiple drivers.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.SceneSyncRoot">
      <summary>
            Gets the rendering scene which is constantly synchronized/derived with/from the (global) Scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPanel.LocalSceneSyncRoot">
      <summary>
            Get the rendering scene which is constantly synchronized/derived with/from the LocalScene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Controls.ILPlotPanel.#ctor">
      <summary>
            Create a new plot panel with an empty plot cube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Controls.ILPlotPanel.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Controls.ILPlotPanel.Dispose(System.Boolean)">
      <summary>
 
            Clean up any resources being used.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Controls.ILPlotPanel.InitializeComponent">
      <summary>
 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
               <para>[ILNumerics Visualization Engine]</para>
       </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Controls.ILPlotPanel.PlotCube">
      <summary>
            The default plot cube object for this plot panel
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Controls.ILPlotPanel.Scene">
      <summary>
            Gets a reference to the global scene of this panel or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILRenderErrorEventArgs.Exception">
      <summary>
            If set, contains the exception data associated with the failure
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILRenderErrorEventArgs.Timeout">
      <summary>
            True if the failure was caused by a timeout
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILXMLDriver">
      <summary>
            Serializing driver for XML output
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILXMLDriver.m_writer">
             Some notes on the functioning of ILXMLDriver. We refused to utilize one of the common .NET serialization methods. 
             Reasons: They all either force (break) a specific design (XML Serializer: publicity of properties, the 
             need of XMLIncludeAttributes on base classes, huge hassle to get inheritance working) or do not give enough
             flexibility by determining the resulting XML layout (DataContract Serializer). Hence, we do it that way: 
             (1) (removed)
             (2) Some basic types are known to the serializer, e.g. ILGroup. These types are 'manually' serialized, utilizing the 'knowledge' of ILXMLDriver. 
             (3) When the driver receives a node which it does not know, it first inspects the type, if it implements a ToXML(XMLWriter) method. If 
                 such method is found, it will be used to serialize the instance. Otherwise, reflection is used to serialize the object. 
             (4) Only properties are serialized. Common XMLAttributes on a property are used to indicate special handling: XMLIgnore, XMLAttribute, XMLElement. 
                 If no attribute exists for a public property it will be serialized as XML element by default.  
            
        </member>
    <member name="T:ILNumerics.Drawing.ILXmlSerializeAsAttribute">
      <summary>
            Attribute used to determine the format of members for serialization
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILXmlSerializeAsAttribute.Format">
      <summary>
            Format for serializing members of marked types: "{membername} ..."; also valid: {this}
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILXmlSerializer">
      <summary>
            Serializer class for serializing ILNumerics scenes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILXmlSerializer.#ctor(System.Xml.XmlWriter)">
      <summary>
            Create a new ILXmlSerializer and provide the xml writer which receives the data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="writer">xml writer as target for the data</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILXmlSerializer.Serialize(System.Object)">
      <summary>
            Convert the given object and all its subobjects / subtree into XML representation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="obj">ILNumerics object, mostly ILScene</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            create new matrix ROW MAJOR definition!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="m11"></param>
      <param name="m12"></param>
      <param name="m13"></param>
      <param name="m14"></param>
      <param name="m21"></param>
      <param name="m22"></param>
      <param name="m23"></param>
      <param name="m24"></param>
      <param name="m31"></param>
      <param name="m32"></param>
      <param name="m33"></param>
      <param name="m34"></param>
      <param name="m41"></param>
      <param name="m42"></param>
      <param name="m43"></param>
      <param name="m44"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.Invert(ILNumerics.Drawing.Matrix4)">
      <summary>
            Calculate the inverse of the given matrix
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="mat">The matrix to invert</param>
      <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a perspective projection matrix.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
      <param name="aspect">Aspect ratio of the view (width / height)</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <param name="result">A projection matrix that transforms camera space to raster space</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>fovy is zero, less than zero or larger than Math.PI</item><item>aspect is negative or zero</item><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,ILNumerics.Drawing.Matrix4@)">
      <summary>
            Creates an perspective projection matrix.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">Left edge of the view frustum</param>
      <param name="right">Right edge of the view frustum</param>
      <param name="bottom">Bottom edge of the view frustum</param>
      <param name="top">Top edge of the view frustum</param>
      <param name="zNear">Distance to the near clip plane</param>
      <param name="zFar">Distance to the far clip plane</param>
      <param name="result">A projection matrix that transforms camera space to raster space</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet"><item>zNear is negative or zero</item><item>zFar is negative or zero</item><item>zNear is larger than zFar</item></list></exception>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.Rotation(ILNumerics.Drawing.Vector3,System.Double)">
      <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="axis">The axis to rotate about.</param>
      <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
      <param name="result">A matrix instance.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.Mult(ILNumerics.Drawing.Matrix4@,ILNumerics.Drawing.Matrix4@,ILNumerics.Drawing.Matrix4@)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The left operand of the multiplication.</param>
      <param name="right">The right operand of the multiplication.</param>
      <param name="result">A new instance that is the result of the multiplication</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.ViewTransformWithPerspDivide(ILNumerics.Drawing.Matrix4,ILNumerics.ILInArray{System.Single})">
      <summary>
            Transforms clip positions into view coordinates, includes perspective divide
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ViewTransform">View Transformation Matrix</param>
      <param name="A">clip positions matrix, 3xn or 4xn</param>
      <returns>view coordinates</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Matrix4.CreateFromQuaternion(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Matrix4@)">
      <summary>
            Build a rotation matrix from the specified quaternion.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">Quaternion to translate.</param>
      <param name="m">Matrix result.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILClipParams.Infinity">
      <summary>
            A set of clipping planes which does apply clipping at infinity; effectively causes no clipping
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILClipParams.Item(System.Int32)">
      <summary>
            Gets individual clipping planes 0...5
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="i">index of the clipping plane, allowed: 0..5, for i &gt; 5 the 6th plane is addressed.</param>
      <returns>The clipping plane identified by <paramref name="i" /></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILBackBuffer.Stride">
      <summary>
            storage between adjacent pixels of two rows in number of pixels; valid only when the buffer is locked!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILTextureStorage">
      <summary>
            The class provides texture storage for a single class of texures (e.g. one font)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The texture items are stored in a single texture sheet 
            and organized via a simple binary tree.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILTextureStorage.m_disposed">
      <summary>
             cache, which texture has been bound at last
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.#ctor(System.Drawing.Size)">
      <summary>
            construct new storage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="height">absolute height (permanent)</param>
      <param name="width">absolute width (permanent)</param>
      <remarks>Suggested size parameter will be increased to the next power of two.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Get(System.String)">
      <summary>
            fetch texture item from storage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="key"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.TryGetTextureItem(System.String,ILNumerics.Drawing.ILTextureData@)">
      <summary>
            try to fetch item by key
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="key">unique key</param>
      <param name="item">[output] item found</param>
      <returns>true: item was found, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Exists(System.String)">
      <summary>
            test, if a key exists in the texture storage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="key">unique key to be tested for</param>
      <returns>true if a texture item associated with that key exists, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Store(System.String,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
            store bitmap into texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="key">unique key for item</param>
      <param name="data">item bitmap data</param>
      <param name="textureStorageSize">used rectangle in data bitmap</param>
      <param name="itemScreenSize">actual size of the glyph on screen</param>
      <param name="textureGlyphRect">actual size of the glyph within the texture</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.InitTexture">
      <summary>
            initialize texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Store(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
            store item in texture sheet in GL
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="data">new item bitmap data</param>
      <param name="location">area in bitmap data to be stored</param>
      <param name="rect">rectangle specifying area to store the data into,
            texture coords: range from 0...1.0</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.MakeCurrent">
      <summary>
            select the texture storage as current in the GL
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Calling this function before an storage / render operation is 
            obligatory in specific rendering machines (e.g. OpenGL). For GL's, where 
            it is not neccessary, the implementation must ignore any calls to this function.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Dispose">
      <summary>
            Dispose off any texture storage's ressources
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Dispose(System.Boolean)">
      <summary>
            Dispose off manually
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="manual"></param>
      <remarks>The true disposing is done in the concrete implementation.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTextureStorage.Finalize">
      <summary>
            Finalizer, disposing ressources
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILTextureStorage.Cleared">
      <summary>
            Fires, when the managed texture sheets are cleared. Registrars must rebuild needed items afterwards
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTextureStorage.Height">
      <summary>
            overall height of the internal texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTextureStorage.Width">
      <summary>
            current width of the internal texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILTextureStorage.Node">
      <summary>
            class representing a binary tree, used to manage the items on the texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This code is a slightly modified version of the OpenTK.Utilities framework
            TextPrinter/TextureStorage classes. See http://opentk.com for details.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILGDIDriver.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)">
      <summary>
            Pick primitive(s) below specific screen position
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="drawable">The shape to pick the primitive from</param>
      <param name="point">Windows coordinates of the point to pick</param>
      <param name="time">[Optional] time frame for rendering (for animations only)</param>
      <param name="ignoreLogAxis">[Optional] true: never log() vertex data returned, even for logaritmic log axis scales. Default: false</param>
      <returns>Interface giving access to detailed information of the primitive(s) found</returns>
      <remarks>
        <para>
          <see cref="M:ILNumerics.Drawing.ILGDIDriver.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" /> finds all primitives below the position given in <paramref name="point" /> which belong to the 
            drawable object specified in <paramref name="drawable" />. In difference to <see cref="M:ILNumerics.Drawing.ILPanel.PickAt(System.Drawing.Point,System.Int64)" /> which 
            only finds the <b>drawable</b>, i.e. the shape or the label below the window position, <see cref="M:ILNumerics.Drawing.ILGDIDriver.PickPrimitiveAt(ILNumerics.Drawing.ILDrawable,System.Drawing.Point,System.Int64,System.Boolean)" /> 
            finds all primitives within that drawable. This allows the identification of individual tiles (triangles), line segments and individual 
            points of arbitrary shapes. Detailed information is given for the primitives found, including vertex data in object and screen coordinates,
            order of the primitives relative to the camera and interpolated position data.</para>
        <para>If <paramref name="drawable" /> is null, a regular picking operation is performed first in order to identify the closest drawable 
            object under <paramref name="point" /> and the primitives are picked from that afterwards.</para>
        <para>
          <paramref name="point" /> is expected in window (pixel) coordinates. All mouse events provide the window position in the 
            <see cref="!:MouseEventArgs.Location" /> property. Note, that the origin (0,0) for window coordinates lays in the upper left corner 
            of the window.</para>
        <para>If the drawable is displayed in the context of a plot cube with <a href="axis-configuration.html#logarithmic-scales">logarithmic axis scales</a>
            the vertex data returned are also logarithmic. Therefore, they reflect the rendered position rather than the original data specified for the object. 
            If this is not intended, one can set the <paramref name="ignoreLogAxis" /> flag to true and the data returned in <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesWorld" />
            will correspond to the actual data specified by the user and not be logarithmic. Note that the vertex screen data returned in 
            <see cref="P:ILNumerics.Drawing.IILPickingResult.VerticesScreen" /> will always correspond to the logarithmic representation in that context, regardless of 
            the setting of <paramref name="ignoreLogAxis" />.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <example>
        <code><![CDATA[
            using System;
            using System.Collections.Generic;
            using System.ComponentModel;
            using System.Data;
            using System.Drawing;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            using System.Windows.Forms;
            using ILNumerics; 
            using ILNumerics.Drawing; 
            using ILNumerics.Drawing.Plotting;
            using ILNumerics.Exceptions; 
            
            
            namespace WindowsFormsApplication3 {
                
                // Picking Example. The application creates a surface in a plot cube. It registers several event handler 
                // demonstrating the picking of primitives and the interactive manipulation of the scene to display 
                // the picking results. A small blue dot is moving below the mouse at interpolated positions. A larger red dot 
                // is placed at the nearest vertex to the mouse. Hovering over the red dot displays a tool tip with the position 
                // value of the vertex in a screen overlay.  
                //
                // Create a new WindowsForms application and paste the content of the following class into it. Start the application
                // and move the mouse over the surface. Watch the values and positions of the red and blue dot change. Hover 
                // over the red dot. A tool tip window is shown displaying the values of its position. 
                public partial class Form1 : Form {
                    public Form1() {
                        InitializeComponent();
                    }
            
                    // attributes: red point marking vertices, blue for interpolated value
                    ILPoints m_pointsRed, m_pointsBlue;
                    // a screen object is used as tool tip label
                    ILScreenObject m_labelObj;  
                    
                    // this is the regular panel load event handler
                    private void ilPanel1_Load(object sender, EventArgs e) {
                        // setup objects
                        m_pointsRed = new ILPoints("MarkVertex") {
                            Color = Color.Red,
                            Size = 10
                        };
                        m_pointsBlue = new ILPoints("MarkPosition") {
                            Color = Color.Blue,
                            Size = 3
                        };
                        // the tooltip label is placed inside an ILScreenObject
                        m_labelObj = new ILScreenObject("LabelObj") {
                            Children = { 
                                new ILLabel(tag: "Label") {
                                    // centered in the screen object
                                    Position = new Vector3(.5f,.5f,0),
                                    Anchor = new PointF(.5f,.5f)
                                }
                            },
                            // disable interactive movement of the screen object
                            Movable = false,
                            // displace slightly away from the mouse 
                            Anchor = new PointF(-0.05f,-0.05f),
                            Width = 150,
                            Height = 30,
                            Visible = false
                        }; 
                        // create some test data
                        ILArray<float> C = ILSpecialData.sincf(20, 30, 3);
                        C["2:5;10:14"] = 1;  // make it more interesting
            
                        // add objects to the scene
                        ilPanel1.Scene.Add(new ILPlotCube(twoDMode: false) {
                            new ILSurface(C),
                            // dots and tool tip go into a seperated  group
                            // so we can render them on top of the surface
                            new ILGroup(target: RenderTarget.Screen2DFar) { 
                                m_pointsRed, m_pointsBlue, m_labelObj
                            }
                        });
                        // wire up events 
                        ilPanel1.Scene.First<ILSurface>().MouseMove += ilSurface1_MouseMove;
                        m_pointsRed.MouseEnter += m_pointsRed_MouseEnter;
                        m_pointsRed.MouseLeave += m_pointsRed_MouseLeave;
                    }
            
                    void m_pointsRed_MouseEnter(object sender, ILMouseEventArgs e) {
                        // fetch reference to the tool tip label
                        var label = m_labelObj.First<ILLabel>(tag: "Label");
                        if (label != null) {
                            // display the position of the red dot in the tool tip
                            label.Text = m_pointsRed.Positions.GetPositionAt(0).ToString();
                            m_labelObj.Location = e.LocationF;
                            m_labelObj.Visible = true;
                            // always need to Configure() after changes
                            m_labelObj.Configure();
                            // redraw the scene
                            ilPanel1.Refresh();
                        }
                    }
                    void m_pointsRed_MouseLeave(object sender, ILMouseEventArgs e) {
                        m_labelObj.Visible = false;
                        // always need to Configure() after changes
                        m_labelObj.Configure();
                        // redraw the scene
                        ilPanel1.Refresh();
                    }
            
                    void ilSurface1_MouseMove(object sender, ILMouseEventArgs e) {
                        // perform picking of the primitives below the cursor
                        using (var pick = ilPanel1.PickPrimitiveAt(e.Target as ILDrawable, e.Location)) {
                            
                            // TODO: we do not check for pick containing data for triangles here. In 
                            // a production environment, you must do all common checks!
            
                            try {
                                // Move the red dot to nearest vertex. pick.NextVertex[0] gives the 
                                // index for the closest primitive in pick.VerticesWorld (row index). 
                                // "0:2" addresses the X,Y and Z values for the vertex in the corrresponding row. 
                                // The third dimension '0' means: the first primtive, which will always be the 
                                // one closest to the camera. 
                                m_pointsRed.Positions.Update(pick.VerticesWorld[pick.NextVertex[0], "0:2", 0][":"]);
                                // compute interpolated point: use the barycentric coordinates provided in 
                                // Vertices["0,1;3;0"] in order to interpolate any value over the triangle 
                                // for the picked point. 
                                float s = pick.VerticesWorld.GetValue(0, 3);
                                float v = pick.VerticesWorld.GetValue(1, 3);
                                // The third barycentric coordinate is not stored. You can compute it easily 
                                // using the following formula: 
                                float t = 1 - s - v;
                                // interpolate: here, we interpolate the position 
                                ILArray<float> interp = pick.VerticesWorld["0;0:2;0"] * s
                                                      + pick.VerticesWorld["1;0:2;0"] * v
                                                      + pick.VerticesWorld["2;0:2;0"] * t;
                                m_pointsBlue.Positions.Update(interp[":"]);
                                Text = interp.GetValue(2).ToString();
                                m_pointsRed.Configure();
                                m_pointsBlue.Configure();
                                ilPanel1.Refresh();
                            } catch (ILArgumentException) { }
                        }
                    }
                }
            }
            ]]></code>
      </example>
    </member>
    <member name="M:ILNumerics.Drawing.ILHelper.EnsurePlotCubeExtend(System.Single,System.Single@,System.Single@)">
      <summary>
            ensures a non-zero range between min .. max, according to a and floating point options
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">base number</param>
      <param name="min">min range</param>
      <param name="max">max range</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILHelper.SortIndices(ILNumerics.Drawing.ILShape,ILNumerics.Drawing.Matrix4)">
      <summary>
            sort the shape elements for transparent rendering
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="shape">shape</param>
      <param name="transform">model to clip transform</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Lighting.ILMaterial.#ctor">
      <summary>
            construct new material object, initialize default values
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Lighting.ILMaterial.LightingEnabled">
      <summary>
            Switch light support for the material/shape on/off. Default: on
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Lighting.ILMaterial.Shininess">
      <summary>
            shape/intensity for specular reflection, range: 1...128
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Lighting.ILMaterial.Specular">
      <summary>
            color for specular reflection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Lighting.ILMaterial.Emission">
      <summary>
            color for emissive reflection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPreprocessedShape.RecallStateFor(System.Action{ILNumerics.Drawing.ILDrawable,ILNumerics.Drawing.ILRenderParameter},ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            temporarly recall the state stored in this instance forr running the specified action
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="action">action to run in the stored state</param>
      <param name="renderParams">current render parameters</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILRenderParameter.PushClipping(ILNumerics.Drawing.ILClipParams,System.Boolean)">
      <summary>
            takes model coord clipping planes, stores them in camera coords
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="clipping"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILRenderParameter.GetClipping(System.Int32)">
      <summary>
            returns custom clip planes from stack (if any) or frustum planes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="planeID">plane index: 0..5 -&gt; frustum planes; 6 ... 12 (currently) -&gt; custom planes from stack</param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILRenderParameter.FrustumPlanes">
      <summary>
            Frustum planes for the current projection matrix, camera coords
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILOGLBuffer">
      <summary>
            Represents a GL buffer
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLBuffer.#ctor(ILNumerics.Drawing.ILBufferBase)">
      <summary>
            Create new buffer as clone of the given buffer, sharing the underlying storage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="buffer">Source buffer</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLBuffer.#ctor">
      <summary>
            Create a new, empty GL buffer
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLBuffer.UpdateOrReplace(ILNumerics.ILInArray{System.Int32})">
      <summary>
            updates the GL buffer with new data, expanding if necessary. Does not shrink the GL buffer!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="data">new data array, matrix with 3 or 4 rows, [0..n] columns, not null</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLBuffer.UpdateOrReplace(ILNumerics.ILInArray{System.Single})">
      <summary>
            updates the GL buffer with new data, expanding if necessary. Does not shrink the GL buffer!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="data">new data array, matrix with 3 or 4 rows, [0..n] columns, not null</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILOGLBuffer.Deleted">
      <summary>
            Fired when the buffer was deleted completely
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILOGLBuffer.Recreated">
      <summary>
            Fires when the buffer was recreated (for rewiring the buffer)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLBuffer.GLID">
      <summary>
            The ID used to uniquely identify the buffer within the GL
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLBuffer.DataCount">
      <summary>
            Number of data columns stored in the buffer, this may differ from the number of columns actually stored in the GL storage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLBuffer.DataCountGL">
      <summary>
            Number of data columns actually stored in the GL memory
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLBuffer.DataLength">
      <summary>
            Number of rows / elements for each datum
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLBuffer.SourceBuffer">
      <summary>
            Reference to the source buffer, this GL Buffer synchronizes with
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLDriver.GetGLViewport(System.Drawing.RectangleF)">
      <summary>
            get the _OpenGL_ viewport according to ClientSize, Rectangle and innerRect
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="innerRect"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLDriver.ActualVersion">
      <summary>
            Get the actual version of the current OpenGL graphics context
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The actual version may differs from the requested version if the graphics card / driver does not support the version requested. 
            This provides an efficient way of checking the actual version and exit rendering in a failsafe, deterministic way. 
            </para>
        <para>Querying this property successfully requires an OpenGL context to be created and set current. Therefore, if the property is queried too early, 
            this requirement may not be met yet. A version number of 0.0 is returned in this case.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILOGLDriver.GLViewport">
      <summary>
            get/set the _OpenGL_ viewport, expects rectangles origin at UPPER left corner
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILOGLLightsBuffer">
      <summary>
            an uniform buffer object, holds and synchronizes all light data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLShape.Delete">
      <summary>
            Delete all resources from this OGLShape - except the GL buffers (which might be shared with other shapes)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILOGLTextureStorage">
      <summary>
            OpenGL implementation of ILTextureStorage
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLTextureStorage.MakeCurrent">
      <summary>
            Select this storage to be current in GL
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLTextureStorage.InitTexture">
      <summary>
            initialize texture sheet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLTextureStorage.Store(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary>
            store item in texture sheet in GL
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="bmp">new item bitmap data, ARGB format</param>
      <param name="bmpRect">rectangle used in bitmap</param>
      <param name="texRect">rectangle specifying area to store the data into the texture sheet, 
            integer pixels coords: range from 0...m_width|m_height (e.g. '512')</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLTextureStorage.Dispose(System.Boolean)">
      <summary>
            dispose off the texture storage's ressources
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="manual"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILOGLProgram.CreateFor(ILNumerics.Drawing.ILOGLShape,ILNumerics.Drawing.ILRenderParameter)">
      <summary>
            Create or reuse program for a specific shape.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="shape">the shape</param>
      <returns>true: program was newly created, false: program was reused (no need to recreate VAO)</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.IILTextInterpreter">
      <summary>
            interface for classes capable of transforming text 
            expressions into visual output representation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <seealso cref="!:ILNumerics.Drawing.Labeling.ILSimpleTexInterpreter" />
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.IILTextInterpreter.Transform(ILNumerics.Drawing.ILLabel,ILNumerics.Drawing.ILTextureStorage)">
      <summary>
            transform the label element into bitmap representation for rendering
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The implementations changes the (texture) representation of the label 
            into a render queue.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILHashCreator">
      <summary>
            Helper class used to create hashes for renderable items (currently text only)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This class should be used to retrieve an (unique) key for any 
            renderable items used in ILNumerics.Drawing renderer classes. This way on can 
            ensure not to create hash conflicts between different cached items.
             <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:ILNumerics.Drawing.ILHashCreator.Hash(System.String,System.Drawing.Font)" -->
    <member name="T:ILNumerics.Drawing.ILRenderQueue">
      <summary>
            the class collects renderable items which define 
            the graphical output for a render expression
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>ILRenderQueues are semi-immutable. Instances - once created - can only be cleared and 
            re-created, but not altered. Therefore, they keep the size of the output cached over their livetime.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILRenderQueue.#ctor(System.String,System.Collections.Generic.List{ILNumerics.Drawing.ILRenderQueueItem},System.Drawing.SizeF)">
      <summary>
             constructor, creates a new render queue with content
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="expression">expression, which led to this queue</param>
      <param name="queue">prepared queue</param>
      <param name="size">size of content after rendering</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILRenderQueue.Size">
      <summary>
            overall size of content of this render queue in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILRenderQueue.Expression">
      <summary>
            Expression which led to this queue
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILRenderQueueItem">
      <summary>
            Single item with rendering instructions, used in ILRenderQueues
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILRenderQueueItem.Key">
      <summary>
            unique key, identifies the item in the render cache
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILRenderQueueItem.Rect">
      <summary>
            Layout rectangle to render the item into, includes size and offsets for sub/superscript rendering
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILRenderQueueItem.Color">
      <summary>
            Individual color for the item 
            </summary>
      <remarks>If this property is set to Color.Empty, the item will 
            be drawn with the color assigned to hosting element.</remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILRenderQueueItem.TextureRect">
      <summary>
            [optional] Area of the item within the corresponding texture storage
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.ILRenderQueueItem.Text">
      <summary>
            The transformed text of the item 
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILRenderQueueItem.#ctor(System.String,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.Color)">
      <summary>
            construct a new ILRenderQueueItem
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="key">unique key</param>
      <param name="offset">offset</param>
      <param name="color">individual color</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILSimpleInterpreter">
      <summary>
            Transforms characters into bitmaps (1:1)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>this is the base class for most IILTextInterpreter implementations<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleInterpreter.#ctor">
      <summary>
            create a new instance of this text interpreter
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleInterpreter.TransformItem(System.String,System.Drawing.Font,System.Drawing.Rectangle@,System.Drawing.RectangleF@,System.Drawing.SizeF@,System.Boolean)">
      <summary>
            Render a string onto a bitmap and measure exact size
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="item">item to be rendered</param>
      <param name="font">font used for rendering</param>
      <param name="textureStorageSize">[output] size of the rendered item</param>
      <returns>bitmap containing the item</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleInterpreter.transformItem(System.String,System.Drawing.Font,System.Drawing.Rectangle@,System.Drawing.RectangleF@,System.Drawing.SizeF@,System.Boolean)">
      <summary>
            Render a string onto a bitmap and measure exact size
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="item">item to be rendered</param>
      <param name="font">font used for rendering</param>
      <param name="textureStorageSize">[output] size of the rendered item</param>
      <returns>bitmap containing the item</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILSimpleTexInterpreter">
      <summary>
            Simple, (partial) tex symbol interpreter
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>this is the default interpreter for all ILLabelingElements<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleTexInterpreter.#ctor">
      <summary>
            create a new instance of a simple text interpreter
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleTexInterpreter.matchSymbol(System.String,System.Int32@)">
      <summary>
            extract TextSymbol from text
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="text">text to extract symbol from</param>
      <param name="pos">current text character position</param>
      <returns>one of TextSymbol enumeration values</returns>
      <remarks>if one symbol was found, its enum representation is 
            returned and pos is increased by the corresponding number of 
            characters. If no matching symbol was found, pos is not altered 
            and TextSymbols.nothing will be returned.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILSimpleTexInterpreter.TranslateSymbol(ILNumerics.Drawing.ILSimpleTexInterpreter.TextSymbols)">
      <summary>
             translates TextSymbol enum value to unicode character
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="symbol">enum representation</param>
      <returns>unicode character</returns>
      <remarks>refers to: http://www.decodeunicode.org/ (e.g.)<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords">
      <summary>
            available keywords, supported by this IILInterpreter
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The static instance ILSimpleTexInterpreter. These properties give the option 
            to alter the configuring keywords for font styles etc.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Fontname">
      <summary>
            placeholder for font name control sequence
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Fontsize">
      <summary>
            placeholder for font size control sequence
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Italic">
      <summary>
            placeholder for italic font control sequence
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Bold">
      <summary>
            placeholder for bold font control sequence
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Color">
      <summary>
            placeholder for font color control sequence
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILSimpleTexInterpreter.ILKeywords.Reset">
      <summary>
            placeholder for text control sequence 'reset to initial value'
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILSimpleTexInterpreter.TextSymbols">
      <summary>
            all symbols (e.g. \\Alpha ) which are supported by this interpreter
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILTextureData">
      <summary>
            class encapsulating texture item definitions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTextureData.TextureRectangle">
      <summary>
            the item's rectangle area in the texture sheet (texture coordinates)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTextureData.Width">
      <summary>
            Width of the stored item in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTextureData.Height">
      <summary>
            Height of the stored item in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ChangeQueueActions">
      <summary>
            Valid change queue actions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILLabeledTickProvider">
      <summary>
            tick provider function delegate definition
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="min">minimum axis limit</param>
      <param name="max">maximum axis limit</param>
      <param name="maxCount">maximum number of ticks to create</param>
      <returns>list of tick position to be drawn</returns>
      <remarks>User defined tick providers must fulfill this delegates signature. 
            <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILClippingDataChangedEvent">
      <summary>
            Occours if the clipping data for an subfigure have changed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sender">object which changed the data</param>
      <param name="e">arguments containing the new clipping data</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.MeasureTextDelegate">
      <summary>
            delegate used to measure text, device dependent
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="text">text to be measured</param>
      <param name="font">Font used for rendering</param>
      <returns>Size in screen coords</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ClippingChangedEventArgs">
      <summary>
            Arguments on ClippingChanged events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ClippingChangedEventArgs.#ctor(ILNumerics.Drawing.ILLimits)">
      <summary>
            Creates a new ClippingChangedEventArgs object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="clippingData"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ClippingChangedEventArgs.ClippingData">
      <summary>
            The current clipping data
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.ILGraphicsDeviceResetEvent">
      <summary>
            occours if a graphics device has been reset by the underlying graphics framework
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sender">objects who hosts the graphics device</param>
      <param name="eventArgs"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILGraphicsDeviceCreatedEvent">
      <summary>
            occours if a graphics device has been (re)created by an output panel
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sender">objects who hosts the graphics device</param>
      <param name="eventArgs"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILGraphChangedEventArgs">
      <summary>
            arguments to communicate changes on graphs
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILGraphChangedEventArgs.Source">
      <summary>
            string description of the changed parameter
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.ILLabeledTickAddingArgs">
      <summary>
            Event handler handling LabeledTickAdding events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.LabeledTickAddingHandler">
      <summary>
            Delegate definition for function handling LabeledTickAdding events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sender">the sender of the event (e.g. ILTickCollection)</param>
      <param name="args">arguments </param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILAxisChangedEventArgs">
      <summary>
            Event arguments for axis changed events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILAxisChangedEventArgs.AxisName">
      <summary>
            Name of changed axis (X-,Y-,ZAxis)
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.ILAxisChangedEventArgs.#ctor(ILNumerics.Drawing.AxisNames)">
      <summary>
            construct a new instance
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="name"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.AxisChangedEventHandler">
      <summary>
            delegate for functions handling AxisChanged events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sender"></param>
      <param name="args"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILLimits">
      <summary>
            Class holding and managing limits for a 3 dimensional cube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.OnChange">
      <summary>
            called if the limits have changed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.EventingSuspend">
      <summary>
            suspend the firing of events until EventingResume has been called
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.EventingResume">
      <summary>
            Resume previously suspended eventing. Start sending events again.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.EventingStart">
      <summary>
            enable eventing, discarding pending events
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Update(ILNumerics.Drawing.ILLimits)">
      <summary>
            update ranges for this object with union of both ranges.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="clipData">clipping ranges to create union with</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Update(ILNumerics.Drawing.Vector3,System.Int32)">
      <summary>
            update ranges for this object with point coords for specific axes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="point">point with coords to update ranges with</param>
      <param name="updateBitFlags">bitflag combination to specify axis to be recognized: 1,2,4 -&gt; x,y,z</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Update(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            update clipping data for this object with union of this and rectangle specified
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="luCorner">left upper corner</param>
      <param name="rbCorner">right lower corner</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Set(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            Set clipping limits to volume inside the box specified
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="lunCorner">left-upper-near corner of the volume box</param>
      <param name="rbfCorner">right-bottom-far corner of the volume box</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.CopyFrom(ILNumerics.Drawing.ILLimits)">
      <summary>
            copy this from other clipping data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="m_clippingData"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Clone">
      <summary>
            creates clone of this clipping data
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>clone</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.op_Equality(ILNumerics.Drawing.ILLimits,ILNumerics.Drawing.ILLimits)">
      <summary>
            Equalty operator overload, true if both cubes span the same region in 3D space
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="limit1">cube 1</param>
      <param name="limit2">cube 2</param>
      <returns>true if both cubes span the same 3D space, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.op_Inequality(ILNumerics.Drawing.ILLimits,ILNumerics.Drawing.ILLimits)">
      <summary>
            unequalty operator
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="limit1">cube 1</param>
      <param name="limit2">cube 2</param>
      <returns>false if both cubes span the same 3D space, true otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.GetHashCode">
      <summary>
            Returns hash code for this ILClippingData
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>hash code</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLimits.Equals(System.Object)">
      <summary>
            Compares to cube objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="obj"></param>
      <returns>true if obj references this class instance, false otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.ILLimits.Changed">
      <summary>
            fires if the data range have changed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.SphereRadius">
      <summary>
            the radius of a sphere tightly enclosing the box determined by this clipping data limits (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.XMin">
      <summary>
            minimum value for x axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.YMin">
      <summary>
            minimum value for y axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.ZMin">
      <summary>
            minimum value for z axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.XMax">
      <summary>
            maximum value for x axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.YMax">
      <summary>
            maximum value for y axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.ZMax">
      <summary>
            maximum value for z axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.Min">
      <summary>
            minimum (coordinate)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.Max">
      <summary>
            maximum (coordinate)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.CenterF">
      <summary>
            get center of this clipping range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.WidthF">
      <summary>
            get width (x-direction) of this clipping range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.HeightF">
      <summary>
            get height (y-direction) of this clipping range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.DepthF">
      <summary>
            get depth (z-direction) of this clipping range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.IsDirty">
      <summary>
            marks the limits as altered, without having fired a changed event yet
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.AllowZeroVolume">
      <summary>
            true: this clipping data always ensures a non-zero volume
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>'NonZeroVolumne' means, non of Depth,Width nor Heigth are allowed to be zero. If some edge of the cube is set to zero, the class expands this edge by 1 in each direction.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLimits.IsEmpty">
      <summary>
            Gets if this limits object marks an empty volume [readonly]
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Light">
      <summary>
            Properties for a single light definition
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Light.Position">
      <summary>
            the position in CAMERA coords
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Light.Color">
      <summary>
            Color for the light in ranges of [0...1]
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Light.Intensity">
      <summary>
            possible values: 0 (invisible) ... float.MaxValue
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Quaternion">
      <summary>
            Represents a Quaternion.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.#ctor(ILNumerics.Drawing.Vector3,System.Double)">
      <summary>
            Construct a new Quaternion from vector and w components
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The vector part</param>
      <param name="w">The w part</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Construct a new Quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">The x component</param>
      <param name="y">The y component</param>
      <param name="z">The z component</param>
      <param name="w">The w component</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.ToAxisAngle(ILNumerics.Drawing.Vector3@,System.Single@)">
      <summary>
            Convert the current quaternion to axis angle representation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="axis">The resultant axis</param>
      <param name="angle">The resultant angle</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.ToAxisAngle">
      <summary>
            Convert this instance to an axis-angle representation.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Normalize">
      <summary>
            Scales the Quaternion to unit length.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Conjugate">
      <summary>
            Convert this quaternion to its conjugate
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Quaternion.Identity">
      <summary>
            Defines the identity quaternion.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Add(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Add two quaternions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first operand</param>
      <param name="right">The second operand</param>
      <returns>The result of the addition</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Add(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Add two quaternions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first operand</param>
      <param name="right">The second operand</param>
      <param name="result">The result of the addition</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Sub(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Subtracts two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The left instance.</param>
      <param name="right">The right instance.</param>
      <returns>The result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Sub(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Subtracts two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The left instance.</param>
      <param name="right">The right instance.</param>
      <param name="result">The result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Mult(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>A new instance containing the result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Mult(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <param name="result">A new instance containing the result of the calculation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Multiply(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>A new instance containing the result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Multiply(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <param name="result">A new instance containing the result of the calculation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Multiply(ILNumerics.Drawing.Quaternion@,System.Single,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="quaternion">The instance.</param>
      <param name="scale">The scalar.</param>
      <param name="result">A new instance containing the result of the calculation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Multiply(ILNumerics.Drawing.Quaternion,System.Single)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="quaternion">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>A new instance containing the result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Conjugate(ILNumerics.Drawing.Quaternion)">
      <summary>
            Get the conjugate of the given quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion</param>
      <returns>The conjugate of the given quaternion</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Conjugate(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Get the conjugate of the given quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion</param>
      <param name="result">The conjugate of the given quaternion</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Invert(ILNumerics.Drawing.Quaternion)">
      <summary>
            Get the inverse of the given quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion to invert</param>
      <returns>The inverse of the given quaternion</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Invert(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Get the inverse of the given quaternion
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion to invert</param>
      <param name="result">The inverse of the given quaternion</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Normalize(ILNumerics.Drawing.Quaternion)">
      <summary>
            Scale the given quaternion to unit length
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion to normalize</param>
      <returns>The normalized quaternion</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Normalize(ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Scale the given quaternion to unit length
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q">The quaternion to normalize</param>
      <param name="result">The normalized quaternion</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.FromAxisAngle(ILNumerics.Drawing.Vector3,System.Double)">
      <summary>
            Build a quaternion from the given axis and angle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="axis">The axis to rotate about</param>
      <param name="angle">The rotation angle in radians</param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Slerp(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion,System.Single)">
      <summary>
            Do Spherical linear interpolation between two quaternions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="q1">The first quaternion</param>
      <param name="q2">The second quaternion</param>
      <param name="blend">The blend factor</param>
      <returns>A smooth blend between the given quaternions</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.CreateFromMatrix(ILNumerics.Drawing.Matrix4@,ILNumerics.Drawing.Quaternion@)">
      <summary>
            Build a quaternion from the specified rotation matrix.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="m">Matrix to translate</param>
      <param name="q">Quaternion result</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.CreateFromMatrix(ILNumerics.Drawing.Matrix4@)">
      <summary>
            Build a quaternion from the specified rotation matrix.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="m">Matrix to translate.</param>
      <returns>A quaternion</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Addition(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Adds two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Subtraction(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Subtracts two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Multiply(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Multiplies two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Multiply(ILNumerics.Drawing.Quaternion,System.Single)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="quaternion">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>A new instance containing the result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Multiply(System.Single,ILNumerics.Drawing.Quaternion)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="quaternion">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>A new instance containing the result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Equality(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Compares two instances for equality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left equals right; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.op_Inequality(ILNumerics.Drawing.Quaternion,ILNumerics.Drawing.Quaternion)">
      <summary>
            Compares two instances for inequality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left does not equal right; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.ToString">
      <summary>
            Returns a System.String that represents the current Quaternion.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Equals(System.Object)">
      <summary>
            Compares this object instance to another object for equality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="other">The other object to be used in the comparison.</param>
      <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.GetHashCode">
      <summary>
            Provides the hash code for this object.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Quaternion.Equals(ILNumerics.Drawing.Quaternion)">
      <summary>
            Compares this Quaternion instance to another Quaternion for equality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="other">The other Quaternion to be used in the comparison.</param>
      <returns>True if both instances are equal; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.Xyz">
      <summary>
            Gets or sets a Vector3 with the X, Y and Z components of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.X">
      <summary>
            Gets or sets the X component of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.Y">
      <summary>
            Gets or sets the Y component of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.Z">
      <summary>
            Gets or sets the Z component of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.W">
      <summary>
            Gets or sets the W component of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.Length">
      <summary>
            Gets the length (magnitude) of the quaternion.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <seealso cref="P:ILNumerics.Drawing.Quaternion.LengthSquared" />
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Quaternion.LengthSquared">
      <summary>
            Gets the square of the quaternion length (magnitude).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Vector3">
      <summary>
            single precision 3D point structure
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Vector3.m_x">
      <summary>
            X coordinate
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector3.m_y">
      <summary>
            Y coordinate
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector3.m_z">
      <summary>
            Z coordinate
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            create vector explicitly
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">X coord</param>
      <param name="y">Y coord</param>
      <param name="z">Z coord</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            create explicitly
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">X coord</param>
      <param name="y">Y coord</param>
      <param name="z">Z coors</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.ToString">
      <summary>
            convert this point to string representation
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.op_Multiply(System.Single,ILNumerics.Drawing.Vector3)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="scale">The scalar.</param>
      <param name="vec">The instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Dot(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            Calculate the dot (scalar) product of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">First operand</param>
      <param name="right">Second operand</param>
      <returns>The dot product of the two inputs</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Pow(ILNumerics.Drawing.Vector3,System.Single)">
      <summary>
            elementwise power for vector elements
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">vector</param>
      <param name="exp">exponent</param>
      <returns>new vector with elementwise power of 'vec's elements</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.op_Multiply(ILNumerics.Drawing.Matrix4,ILNumerics.Drawing.Vector3)">
      <summary>
            Vector transformation and perspective divide
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="mat">transformation matrix</param>
      <param name="vec">vector</param>
      <returns>transformed vector in normalized device coordinates</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.op_Multiply(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Matrix4)">
      <summary>
            Vector transformation (left side)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="mat">transformation matrix</param>
      <param name="vec">vector</param>
      <returns>transformed vector in normalized device coordinates</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Cross(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            cross product
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">vector 1</param>
      <param name="b">vector 2</param>
      <returns>normalized cross product between a x b</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.CrossN(ILNumerics.Drawing.Vector3,ILNumerics.Drawing.Vector3)">
      <summary>
            normalized cross product
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">vector 1</param>
      <param name="b">vector 2</param>
      <returns>normalized cross product: a x b</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.InverseSqrtFast(System.Single)">
      <summary>
            Returns an approximation of the inverse square root of left number.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">A number.</param>
      <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
      <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Spin(ILNumerics.Drawing.Vector3,System.Single)">
      <summary>
            rotate the vector, keep length
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="normal">axis as rotation normal</param>
      <param name="angleDeg">angle to move (radian)</param>
      <returns>rotated version of this vector, does not change original vector</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Normalize">
      <summary>
            Scales the Vector3 to unit length.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.NormalizeFast">
      <summary>
            Scales the Vector3 to approximately unit length.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.Equals(System.Object)">
      <summary>
            Compares obj's coordinate values to those of this class instance
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="obj">Vector3 to compare</param>
      <returns>true, if X,Y and Z coordinates are equal</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.GetHashCode">
      <summary>
            get a hash code for this Vector3 object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>hash code</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector3.ToXMLAttrString">
      <summary>
            Convert this vector into a short string representation, suitable for xml attribute serialization
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>short string representing this vectors content</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.X">
      <summary>
            X coordinate
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.Y">
      <summary>
            Y coordinate
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.Z">
      <summary>
            Z coordinate
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.Item(System.Int32)">
      <summary>
            Access to coords by index
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="index">index number: 0=x, 1=y, 2=z</param>
      <returns>float value of coord specified</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.Length">
      <summary>
            Gets the length (magnitude) of the vector.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <see cref="P:ILNumerics.Drawing.Vector3.LengthFast" />
      <seealso cref="P:ILNumerics.Drawing.Vector3.LengthSquared" />
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.LengthFast">
      <summary>
            Gets an approximation of the vector length (magnitude).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            <para>[ILNumerics Visualization Engine]</para></remarks>
      <see cref="P:ILNumerics.Drawing.Vector3.Length" />
      <seealso cref="P:ILNumerics.Drawing.Vector3.LengthSquared" />
    </member>
    <member name="P:ILNumerics.Drawing.Vector3.LengthSquared">
      <summary>
            Gets the square of the vector length (magnitude).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            <para>[ILNumerics Visualization Engine]</para></remarks>
      <see cref="P:ILNumerics.Drawing.Vector3.Length" />
      <seealso cref="P:ILNumerics.Drawing.Vector3.LengthFast" />
    </member>
    <member name="T:ILNumerics.Drawing.Vector4">
      <summary>
Represents a 4D vector using four single-precision floating-point numbers.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.X">
      <summary>
            The X component of the Vector4.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.Y">
      <summary>
            The Y component of the Vector4.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.Z">
      <summary>
            The Z component of the Vector4.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.W">
      <summary>
            The W component of the Vector4.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.UnitX">
      <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.UnitY">
      <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.UnitZ">
      <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.UnitW">
      <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.Zero">
      <summary>
            Defines a zero-length Vector4.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.One">
      <summary>
            Defines an instance with all components set to 1.
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Vector4.SizeInBytes">
      <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new Vector4.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="x">The x component of the Vector4.</param>
      <param name="y">The y component of the Vector4.</param>
      <param name="z">The z component of the Vector4.</param>
      <param name="w">The w component of the Vector4.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.#ctor(ILNumerics.Drawing.Vector3)">
      <summary>
            Constructs a new Vector4 from the given Vector3.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The Vector3 to copy components from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.#ctor(ILNumerics.Drawing.Vector3,System.Single)">
      <summary>
            Constructs a new Vector4 from the specified Vector3 and w component.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The Vector3 to copy components from.</param>
      <param name="w">The w component of the new Vector4.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.#ctor(ILNumerics.Drawing.Vector4)">
      <summary>
            Constructs a new Vector4 from the given Vector4.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The Vector4 to copy components from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Add(ILNumerics.Drawing.Vector4)">
      <summary>
Add the Vector passed as parameter to this instance.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="right">Right operand. This parameter is only read from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Add(ILNumerics.Drawing.Vector4@)">
      <summary>
Add the Vector passed as parameter to this instance.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="right">Right operand. This parameter is only read from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Sub(ILNumerics.Drawing.Vector4)">
      <summary>
Subtract the Vector passed as parameter from this instance.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="right">Right operand. This parameter is only read from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Sub(ILNumerics.Drawing.Vector4@)">
      <summary>
Subtract the Vector passed as parameter from this instance.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="right">Right operand. This parameter is only read from.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Mult(System.Single)">
      <summary>
Multiply this instance by a scalar.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="f">Scalar operand.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Div(System.Single)">
      <summary>
Divide this instance by a scalar.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="f">Scalar operand.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Normalize">
      <summary>
            Scales the Vector4 to unit length.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Scales the current Vector4 by the given amounts.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="sx">The scale of the X component.</param>
      <param name="sy">The scale of the Y component.</param>
      <param name="sz">The scale of the Z component.</param>
      <param name="sw">The scale of the Z component.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Scale(ILNumerics.Drawing.Vector4)">
      <summary>
Scales this instance by the given parameter.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="scale">The scaling of the individual components.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Scale(ILNumerics.Drawing.Vector4@)">
      <summary>
Scales this instance by the given parameter.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="scale">The scaling of the individual components.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Sub(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Subtract one Vector from another
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>Result of subtraction</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Sub(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Subtract one Vector from another
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="result">Result of subtraction</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Mult(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Multiply a vector and a scalar
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Vector operand</param>
      <param name="f">Scalar operand</param>
      <returns>Result of the multiplication</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Mult(ILNumerics.Drawing.Vector4@,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
            Multiply a vector and a scalar
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Vector operand</param>
      <param name="f">Scalar operand</param>
      <param name="result">Result of the multiplication</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Div(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Divide a vector by a scalar
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Vector operand</param>
      <param name="f">Scalar operand</param>
      <returns>Result of the division</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Div(ILNumerics.Drawing.Vector4@,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
            Divide a vector by a scalar
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Vector operand</param>
      <param name="f">Scalar operand</param>
      <param name="result">Result of the division</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Add(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Adds two vectors.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Left operand.</param>
      <param name="b">Right operand.</param>
      <returns>Result of operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Add(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Adds two vectors.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">Left operand.</param>
      <param name="b">Right operand.</param>
      <param name="result">Result of operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Subtract(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Subtract one Vector from another
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>Result of subtraction</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Subtract(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Subtract one Vector from another
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="result">Result of subtraction</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Multiply(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Multiplies a vector by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <returns>Result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Multiply(ILNumerics.Drawing.Vector4@,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
            Multiplies a vector by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <param name="result">Result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Multiply(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Multiplies a vector by the components a vector (scale).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <returns>Result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Multiply(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Multiplies a vector by the components of a vector (scale).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <param name="result">Result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Divide(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Divides a vector by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <returns>Result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Divide(ILNumerics.Drawing.Vector4@,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
            Divides a vector by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <param name="result">Result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Divide(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Divides a vector by the components of a vector (scale).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <returns>Result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Divide(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Divide a vector by the components of a vector (scale).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vector">Left operand.</param>
      <param name="scale">Right operand.</param>
      <param name="result">Result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Min(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Calculate the component-wise minimum of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>The component-wise minimum</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Min(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Calculate the component-wise minimum of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="result">The component-wise minimum</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Max(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Calculate the component-wise maximum of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>The component-wise maximum</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Max(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Calculate the component-wise maximum of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="result">The component-wise maximum</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Clamp(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Clamp a vector to the given minimum and maximum vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">Input vector</param>
      <param name="min">Minimum vector</param>
      <param name="max">Maximum vector</param>
      <returns>The clamped vector</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Clamp(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Clamp a vector to the given minimum and maximum vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">Input vector</param>
      <param name="min">Minimum vector</param>
      <param name="max">Maximum vector</param>
      <param name="result">The clamped vector</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Normalize(ILNumerics.Drawing.Vector4)">
      <summary>
            Scale a vector to unit length
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The input vector</param>
      <returns>The normalized vector</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Normalize(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Scale a vector to unit length
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The input vector</param>
      <param name="result">The normalized vector</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Dot(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Calculate the dot product of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">First operand</param>
      <param name="right">Second operand</param>
      <returns>The dot product of the two inputs</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Dot(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,System.Single@)">
      <summary>
            Calculate the dot product of two vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">First operand</param>
      <param name="right">Second operand</param>
      <param name="result">The dot product of the two inputs</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Lerp(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First input vector</param>
      <param name="b">Second input vector</param>
      <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
      <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Lerp(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First input vector</param>
      <param name="b">Second input vector</param>
      <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
      <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.BaryCentric(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4,System.Single,System.Single)">
      <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="a">First input Vector</param>
      <param name="b">Second input Vector</param>
      <param name="c">Third input Vector</param>
      <param name="u">First Barycentric Coordinate</param>
      <param name="v">Second Barycentric Coordinate</param>
      <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.BaryCentric(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Vector4@,System.Single,System.Single,ILNumerics.Drawing.Vector4@)">
      <summary>
Interpolate 3 Vectors using Barycentric coordinates
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="a">First input Vector.</param>
      <param name="b">Second input Vector.</param>
      <param name="c">Third input Vector.</param>
      <param name="u">First Barycentric Coordinate.</param>
      <param name="v">Second Barycentric Coordinate.</param>
      <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Transform(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Quaternion)">
      <summary>
            Transforms a vector by a quaternion rotation.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The vector to transform.</param>
      <param name="quat">The quaternion to rotate the vector by.</param>
      <returns>The result of the operation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Transform(ILNumerics.Drawing.Vector4@,ILNumerics.Drawing.Quaternion@,ILNumerics.Drawing.Vector4@)">
      <summary>
            Transforms a vector by a quaternion rotation.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The vector to transform.</param>
      <param name="quat">The quaternion to rotate the vector by.</param>
      <param name="result">The result of the operation.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Addition(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Adds two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Subtraction(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Subtracts two instances.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_UnaryNegation(ILNumerics.Drawing.Vector4)">
      <summary>
            Negates an instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Multiply(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Multiply(System.Single,ILNumerics.Drawing.Vector4)">
      <summary>
            Multiplies an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="scale">The scalar.</param>
      <param name="vec">The instance.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Division(ILNumerics.Drawing.Vector4,System.Single)">
      <summary>
            Divides an instance by a scalar.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="vec">The instance.</param>
      <param name="scale">The scalar.</param>
      <returns>The result of the calculation.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Equality(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Compares two instances for equality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left equals right; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Inequality(ILNumerics.Drawing.Vector4,ILNumerics.Drawing.Vector4)">
      <summary>
            Compares two instances for inequality.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="left">The first instance.</param>
      <param name="right">The second instance.</param>
      <returns>True, if left does not equa lright; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Explicit(ILNumerics.Drawing.Vector4)~System.Single*">
      <summary>
            Returns a pointer to the first element of the specified instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The instance.</param>
      <returns>A pointer to the first element of v.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.op_Explicit(ILNumerics.Drawing.Vector4)~System.IntPtr">
      <summary>
            Returns a pointer to the first element of the specified instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="v">The instance.</param>
      <returns>A pointer to the first element of v.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.ToString">
      <summary>
            Returns a System.String that represents the current Vector4.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.GetHashCode">
      <summary>
            Returns the hashcode for this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="obj">The object to compare to.</param>
      <returns>True if the instances are equal; false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.Equals(ILNumerics.Drawing.Vector4)">
      <summary>
Indicates whether the current vector is equal to another vector.
<para>[ILNumerics Visualization Engine]</para>
</summary>
      <param name="other">A vector to compare with this vector.</param>
      <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Vector4.ToXMLAttrString">
      <summary>
            Convert this vector into a short string representation, suitable for xml attribute serialization
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>short string representing this vectors content</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector4.Length">
      <summary>
            Gets the length (magnitude) of the vector.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <see cref="!:LengthFast" />
      <seealso cref="P:ILNumerics.Drawing.Vector4.LengthSquared" />
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Vector4.LengthSquared">
      <summary>
            Gets the square of the vector length (magnitude).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            <para>[ILNumerics Visualization Engine]</para></remarks>
      <see cref="P:ILNumerics.Drawing.Vector4.Length" />
    </member>
    <member name="P:ILNumerics.Drawing.Vector4.Xyz">
      <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.LineWidth">
      <summary>
            Get the width of the contour lines of this level or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.LabelSpacing">
      <summary>
            (Not used yet)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.Text">
      <summary>
            Override the automatic text setting for contour line labels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.LineColor">
      <summary>
            Determine the line color by mapping the value into the current colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.FillColor">
      <summary>
            Determine the fill color by mapping the value into the current colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.LabelColor">
      <summary>
            Get the color for the contour line labels or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.LineStyle">
      <summary>
            Get the dash style for the contour lines of that level or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ContourLevel.ShowLabel">
      <summary>
            If set, determines if contour lines of this level should be labeled, otherwise take Default setting
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILColorEnumerator">
      <summary>
            Color enumerator, used for line plot coloring
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColorEnumerator.#ctor(ILNumerics.Drawing.Colormaps)">
      <summary>
            Creates a new color enumerator based on a user defined colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="basemap"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColorEnumerator.#ctor">
      <summary>
            Creates a new color enumerator based on Colormap.Lines
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColorEnumerator.NextColor">
      <summary>
            Gives the next color from the enumeration
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>The next color from the enumeration</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColorEnumerator.Reset">
      <summary>
            Resets the enumerator to the first color
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.SetData(ILNumerics.ILInArray{System.Single})">
      <summary>
            Sets internal data for color indices
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>
          <paramref name="data" /> is a matrix with 5 columns, elements in range [0...1] 
            <list type="number"><item>Column 0: keypoint position</item><item>Column 1: keypoint R color component value</item><item>Column 2: keypoint G color component value</item><item>Column 3: keypoint B color component value</item><item>Column 4: keypoint alpha component value</item></list></para>
        <para>Calling this function may fire a <see cref="E:ILNumerics.Drawing.Plotting.ILColormap.Changed" /> event.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.#ctor">
      <summary>
            construct new colormap, based on ILNumerics default
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.#ctor(ILNumerics.Drawing.Colormaps)">
      <summary>
             create specific colormap
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="map"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.#ctor(ILNumerics.ILInArray{System.Single})">
      <summary>
            Creates a new colormap based on predefined colors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="colors">Matrix with keypoint values as rows, 
            5 columns each: keypoint position (float range), R, G, B, A components in range[0...1]</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.op_Implicit(ILNumerics.Drawing.Colormaps)~ILNumerics.Drawing.Plotting.ILColormap">
      <summary>
            Implicitly converts a Colormaps enumeration value to a discrete colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="val">Colormaps enum value</param>
      <returns>new colormap object</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.Map(System.Single,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector4})">
      <summary>
            Map single value within colormap data range to color
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="val">Value to map, range of this colormap data range (i.e. column 0 in <see cref="P:ILNumerics.Drawing.Plotting.ILColormap.Data" /> matrix)</param>
      <param name="outOfRangeAndNaNsValue">[optional] Replacement value if no valid color could be mapped, default: black</param>
      <param name="minMaxRange">[optional] If null: val is mapped to the colormap from range 0..1; otherwise, the range for val is taken from minMaxRange</param>
      <returns>Color as Vector4 with mapped RGBA (XYZW) values, interpolated according to this colormap</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.Map(ILNumerics.ILInArray{System.Single},System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector4})">
      <summary>
            Maps all elements in A to interpolated colors from this colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">Array with elements to map, values will be taken in order of storage in A and lined up by their linear indices</param>
      <param name="dataRange">[optional] If given, dataRange marks the upper and lower limit of the color mapping data range, if null: taken from A.GetLimits()</param>
      <param name="outOfRangeAndNaNsValue">[optional] Color value assigned to those values in A, which do not fit inside the range given by <paramref name="dataRange" />. Default: Color.Black</param>
      <returns>Colors as matrix, the i-th row represents the color from the i-th element of A (linear indexing) as RGBA quadrupel (RGB components and alpha).</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="E:ILNumerics.Drawing.Plotting.ILColormap.Changed">
      <summary>
            Fires when the colormap data have changed
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILColormap.Length">
      <summary>
            Number of colors in the colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILColormap.Type">
      <summary>
            The colormap type this colormap is based on (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILColormap.Data">
      <summary>
            retrieve / set internal data for color indices
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>Data is a matrix with 5 columns, elements in range [0...1] !
            <list type="number"><item>Column 0: keypoint position</item><item>Column 1: keypoint R color component value</item><item>Column 2: keypoint G color component value</item><item>Column 3: keypoint B color component value</item><item>Column 4: keypoint alpha component value</item></list></para>
        <para>The array returned will be a <i>copy</i> of the internal data only. It cannot be used to alter the internal color table! 
            In order to modify the color table, one must query the table, alter it outside and store it back.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <seealso cref="M:ILNumerics.Drawing.Plotting.ILColormap.SetData(ILNumerics.ILInArray{System.Single})" />
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILColormap.MapCreator.CreateMap(ILNumerics.Drawing.Colormaps)">
      <summary>
            create colormap
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="map">colormap type to create</param>
      <returns>colormap data matrix, the size depends on the type of the colormap</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILColorProvider">
      <summary>
            Color helper - change RGB to/ from HLS model
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILColorProvider.H2RGB(System.Single)">
      <summary>
            convert hue value to RGB value, based on predefined values
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="hue">hue: in range 0...MAXHUEVALUE</param>
      <returns>int value as RGB color, A=255</returns>
      <remarks>the internal values (rgb / luminance,saturation) will not be altered<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILColorProvider.H2RGB(System.Single,System.Single@,System.Single@,System.Single@)">
      <summary>
            convert hue value to seperate RGB values, based on predefined values
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="hue">hue: in range 0...MAXHUEVALUE</param>
      <returns>int value as RGB color, A=255</returns>
      <remarks>the internal values (rgb / luminance,saturation) will not be altered. 
            rgb returned as seperate float values, normalized to 0.0f...1.0f<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILColorProvider.H2RGB(System.Single,System.Single[],System.Int32@)">
      <summary>
            convert hue value to seperate RGB values, based on predefined values
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="hue">hue: in range 0...MAXHUEVALUE</param>
      <param name="offset">offset into vertex array</param>
      <param name="va">vertex array, target for the color</param>
      <remarks>the internal values (rgb / luminance,saturation) will not be altered. 
            rgb returned as seperate float values, normalized to 0.0f...1.0f<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILColorProvider.H2RGB(System.Single,System.Byte@,System.Byte@,System.Byte@)">
      <summary>
            convert hue value to seperate RGB values, based on predefined values
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="hue">hue: in range 0...MAXHUEVALUE</param>
      <returns>int value as RGB color, A=255</returns>
      <remarks>the internal values (rgb / luminance,saturation) will not be altered. 
            rgb returned as seperate float values, normalized to 0.0f...1.0f<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILContourPlot.DefaultContourTag">
      <summary>
            Tag used to identify contour plot objects within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILContourPlot.DefaultLineTag">
      <summary>
            Tag used to identify contour line objects within the scene graph
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.#ctor(ILNumerics.ILInArray{System.Single},System.Nullable{System.Drawing.Color},System.Nullable{System.Single},System.Nullable{ILNumerics.Drawing.DashStyle},System.Nullable{System.Int32},System.Boolean,ILNumerics.Drawing.Plotting.ILColormap,System.Boolean,System.Object)">
      <summary>
            Create contour plot, automatic level definition; allows configuration of all contour lines at once
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">data matrix</param>
      <param name="labelColor">[optional] if set, the color for contour labels. Otherwise: take ContourLevel.Default setting</param>
      <param name="lineColor">[optional] if set, the color map value for the contour lines color. Otherwise: determine colors automatically</param>
      <param name="lineStyle">[optional] if set, the dash style for contour lines. Otherwise: take ContourLevel.Default setting</param>
      <param name="lineWidth">[optional] if set, sets the width for all contour lines. Otherwise: take ContourLevel.Default setting</param>
      <param name="showLabels">[optional] determine visibility of contour labels. Default: true</param>
      <param name="colormap">[optional] if set, the colormap used for mapping Z values to colors in the colormap</param>
      <param name="create3D">[optional] determine, if the contour lines are created with with Z coordinates of the level value. Default: false, create at Z=0.</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.#ctor(ILNumerics.ILInArray{System.Single},System.Collections.Generic.List{ILNumerics.Drawing.Plotting.ContourLevel},ILNumerics.Drawing.Plotting.ILColormap,System.Boolean)">
      <summary>
            Create contour plot, manual level definition; individual contour level configuration
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">data matrix</param>
      <param name="levels">Collection of individual contour levels</param>
      <param name="colormap">[optional] if set, the colormap used for mapping Z values to colors in the colormap</param>
      <param name="create3D">[optional] determine, if the contour lines are created with with Z coordinates of the level value. Default: false, create levels at Z=0.</param>
      <remarks>This constructor creates a new contour plot object with individual contour level specification. <paramref name="levels" /> - if not null - 
            is expected to contain <see cref="T:ILNumerics.Drawing.Plotting.ContourLevel" /> objects with the configuration and data value for all contour lines to be created. No 
            levels will be aquired automatically.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.GetRangeMinValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the minimum axis scale range for rendering axis scales
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">Name of the axis to query</param>
      <returns>Minimum color range</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.GetRangeMaxValue(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the maximum axis scale range for rendering axis scales
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">Name of the axis to query</param>
      <returns>Maximum color range</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.ScaleMode(ILNumerics.Drawing.AxisNames)">
      <summary>
            Provides the scale mode (linear/logarithmic) for rendering axis scales
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="AxisName">Name of the axis to query</param>
      <returns>Linear scale mode</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourPlot.Colormap">
      <summary>
            Colormap used for mapping values to colors
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourPlot.Levels">
      <summary>
            Collection of contour levels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourPlot.ColorRangeMin">
      <summary>
            Gets minimum for the range used to map countour data values to color values within the colormap range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourPlot.ColorRangeMax">
      <summary>
            Gets maximum for the range used to map countour data values to color values within the colormap range
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourPlot.IsColormapped">
      <summary>
            Determines if this contour plot uses a colormap for coloring contour lines
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourPlot.ContourHelper.VisitFace(System.SByte[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            find crossing within a face
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="faces">visited marks for all faces, column major order</param>
      <param name="Z">level values (Z - level), column major order</param>
      <param name="c">index of column for upper left face corner into Z and faces</param>
      <param name="r">index of row for upper left face corner into Z and faces</param>
      <param name="ldz">leading dimension of Z and faces matrices</param>
      <param name="edge">id of edge to start with: 0 (top)... 3 (left)</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourLine.#ctor(System.Object)">
      <summary>
            Create a new countour line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">[optional] tag identifying the object in the scene graph</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourLine.ConfigureLegendVisual(ILNumerics.Drawing.ILGroup)">
      <summary>
            Renders a visual representation of this countour line into a legend
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="renderArea">Root group for output</param>
      <remarks>The <paramref name="renderArea" /> is expected to provide a coordinate system in range [0,0,0] -&gt; [1,1,1]. 
            The function may adds and configures new objects to the group. Properties of the group will not get altered.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourLine.ConfigureLegendLabel(ILNumerics.Drawing.ILGroup)">
      <summary>
            Renders a textual representation / label of this countour line into a legend
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="renderArea">Root group for output</param>
      <remarks>The <paramref name="renderArea" /> is expected to provide a coordinate system in range [0,0,0] -&gt; [1,1,1]. 
            The function may adds and configures new objects to the group. Properties of the group will not get altered.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourLine.GetID">
      <summary>
            Gets an ID for the contour line; used to identify the line among objects in the scene graph
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILContourLine.GetVersion">
      <summary>
            Gets the current version for the contour line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Current version</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourLine.Line">
      <summary>
            Gets access to the line object of the contour line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourLine.Label">
      <summary>
            Gets access to the first label object of the contour line, corresponding to the first segment
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourLine.LabelsGroup">
      <summary>
            Gets access to the group node holding the labels for the contour line segments
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourLine.LabelTarget">
      <summary>
            Determines if the label for the contour line is rendered as Screen2D or as 3D object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILContourLine.ShowLabel">
      <summary>
            Determines if the labels for the contour line is to be shown
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.IILPositionProvider">
      <summary>
            provides methods or properties to handle over individual positions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegendItem.EntryAreaTag">
      <summary>
            Tag used to identiy the entry area within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegendItem.LabelAreaTag">
      <summary>
            Tag used to identiy the label area within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegendItem.LabelTag">
      <summary>
            Tag used to identiy the label within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegendItem.LegendItemTag">
      <summary>
            Tag used to identiy the whole legend item (entry area, label area, label) within the scene graph
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegendItem.#ctor(System.Int32,System.String,System.Object)">
      <summary>
            Create new legend item for manual mode, provide provider reference and [optionally] a label string
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="providerID">A valid object ID to an provider object for the new legend item</param>
      <param name="text">[optional] legend item label text, default: the Tag property of the provider object </param>
      <param name="tag">[optional] a tag identifying the item in the scene</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegendItem.#ctor(ILNumerics.Drawing.Plotting.IILLegendItemDataProvider,System.String,System.Object)">
      <summary>
            Create new legend item for manual mode, provide provider reference and [optionally] a label string
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="plotSource">provider object, the source for the new legend item, can not be null</param>
      <param name="text">[optional] legend item label text, default: the Tag property of the provider object </param>
      <param name="tag">[optional] a tag identifying the item in the scene</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegendItem.Text">
      <summary>
            Legend item label text override, default: null -&gt; builds label text from source plot properties
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegendItem.MarkerPositions">
      <summary>
            The position of the marker within the legend entry area; (X,Y,Z) coordinates; default: (.375, .5, 0)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegendItem.ProviderID">
      <summary>
            Gives a reference to the plot object for this legend item or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILSelectionRectangle">
      <summary>
            Class used for displaying a selection rectangle for zooming in 2D plots
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILSelectionRectangle.LineTag">
      <summary>
            Tag used to identify the selection rectangle lines in the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILSelectionRectangle.GroupTag">
      <summary>
            Tag used to identify the selection rectangle group node in the scene graph
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.#ctor(ILNumerics.ILInArray{System.Double},ILNumerics.ILInArray{System.Double},System.Tuple{System.Single,System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Object)">
      <summary>
            Creates a new surface plot, provide Z, X and/or Y coordinates as double precision arrays (will be rounded internally)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZXYPositions">Positions data for the grid points, matrix of size [m x n x [1|2|3]]</param>
      <param name="C">[optional] Colors for the grid points, size [m x n x [1|4]], default: colormapped heights (Z-values)</param>
      <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
      <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
      <param name="colorsDataRange">[optional] if not null, the lower (Item1) and the upper (Item2) limit of the inherent data range of the
            <paramref name="C" /> parameter in colormap mode. If null, the maximum and the minimum values are taken from <paramref name="C" />.</param>
      <remarks>
        <para>The <paramref name="ZXYPositions" /> parameter defines the grid positions of the new surface. The array 
            is of size [m x n x 3]. m and m are the number of rows / columns respectively. The position coordinates for each 
            grid point is stored along the 3rd dimension. Note the order of the coordinates: Z,X,Y ! Z is obligatory, X and Y are optional. 
            If X and/or Y are ommitted (i.e. a matrix with Z values is provided only), a regular grid will be created for the missing axis, 
            having evenly spaced grid distances of 1. </para>
        <para>The optional <paramref name="C" /> parameter is used to define the coloring of each grid point. One of the 
            following modes are available: 
            <list type="bullet"><item><paramref name="C" /> is an 3d array of size [m x n x [3|4]] with individual RGB[A] color tupels for every grid point.</item><item>If <paramref name="C" /> is a matrix of size [m x n], the values are mapped into the current colormap. If 
            the current colormap is changed, the resulting colors will change as well. Values of <paramref name="C" /> are mapped onto  
            the colorrange of the current colormap. <paramref name="colorsDataRange" /> can be used to adjust the data range used for mapping.</item></list></para>
        <para>The optional <paramref name="colormap" /> parameter can be used to set the surfaces colormap to an individual map. If this 
            parameter is ommitted, the predefined 'ILNumerics' colormap is taken by default.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.#ctor(ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Single},System.Tuple{System.Single,System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Object)">
      <summary>
            Creates a new surface plot, provide Z, X and/or Y coordinates
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZXYPositions">Positions data for the grid points, matrix of size [m x n x [1|2|3]]</param>
      <param name="C">[optional] Colors for the grid points, size [m x n x [1|4]], default: colormapped heights (Z-values)</param>
      <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
      <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
      <param name="colorsDataRange">[optional] if not null, the lower (Item1) and the upper (Item2) limit of the inherent data range of the
            <paramref name="C" /> parameter in colormap mode. If null, the maximum and the minimum values are taken from <paramref name="C" />.</param>
      <remarks>
        <para>The <paramref name="ZXYPositions" /> parameter defines the grid positions of the new surface. The array 
            is of size [m x n x 3]. m and m are the number of rows / columns respectively. The position coordinates for each 
            grid point is stored along the 3rd dimension. Note the order of the coordinates: Z,X,Y ! Z is obligatory, X and Y are optional. 
            If X and/or Y are ommitted (i.e. a matrix with Z values is provided only), a regular grid will be created for the missing axis, 
            having evenly spaced grid distances of 1. </para>
        <para>The optional <paramref name="C" /> parameter is used to define the coloring of each grid point. One of the 
            following modes are available: 
            <list type="bullet"><item><paramref name="C" /> is an 3d array of size [m x n x [3|4]] with individual RGB[A] color tupels for every grid point.</item><item>If <paramref name="C" /> is a matrix of size [m x n], the values are mapped into the current colormap. If 
            the current colormap is changed, the resulting colors will change as well. Values of <paramref name="C" /> are mapped onto  
            the colorrange of the current colormap. <paramref name="colorsDataRange" /> can be used to adjust the data range used for mapping.</item></list></para>
        <para>The optional <paramref name="colormap" /> parameter can be used to set the surfaces colormap to an individual map. If this 
            parameter is ommitted, the predefined 'ILNumerics' colormap is taken by default.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.#ctor(ILNumerics.ILInArray{System.Double},ILNumerics.ILInArray{System.Double},ILNumerics.ILInArray{System.Double},ILNumerics.ILInArray{System.Double},System.Tuple{System.Single,System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Object)">
      <summary>
            Creates a new surface plot, provide Z values, X and Y ranges as double precision arrays (will be rounded internally)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">Positions data for the grid points, matrix of size [m x n]</param>
      <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1]</param>
      <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0]</param>
      <param name="C">[optional] Colors for the grid points, size [m x n x [1|4]], default: colormapped heights (Z-values)</param>
      <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
      <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
      <param name="colorsDataRange">[optional] if not null, the lower (Item1) and the upper (Item2) limit of the inherent data range of the
            <paramref name="C" /> parameter in colormap mode. If null, the maximum and the minimum values are taken from <paramref name="C" />.</param>
      <remarks>
        <para>The <paramref name="Z" />, <paramref name="X" /> and <paramref name="Y" /> parameters define the grid positions of the new surface. Z defines 
            the size of the surface. X and Y define the position of the surface on the X and Y axes respectively. X and Y can be vectors or matrices. If X is provided 
            as vector, it gives the X coordinates of the grid points which are replicated for all rows. If Y is a vector, it defines the Y coords for the grid
            points for all columns respectively. If X or Y are given as matrices, they define the X and/or Y coordinates of all individual grid points explicitely.
            This allows the creation of arbitrary parametric surfaces. </para>
        <para>If either of X or Y is null, the coords are computed based on a regular spacing, starting at 0 and running along the X and Y axis with a step width of 1.</para>
        <para>The optional <paramref name="C" /> parameter is used to define the coloring of each grid point. One of the 
            following modes are available: 
            <list type="bullet"><item><paramref name="C" /> is an 3d array of size [m x n x [3|4]] with individual RGB[A] color tupels for every grid point.</item><item>If <paramref name="C" /> is a matrix of size [m x n], the values are mapped into the current colormap. If 
            the current colormap is changed, the resulting colors will change as well. Values of <paramref name="C" /> are mapped onto  
            the colorrange of the current colormap. <paramref name="colorsDataRange" /> can be used to adjust the data range (min,max) used for mapping.</item></list></para>
        <para>The optional <paramref name="colormap" /> parameter can be used to set the surfaces colormap to an individual map. If this 
            parameter is ommitted, the predefined 'ILNumerics' colormap is taken by default.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.#ctor(ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Single},System.Tuple{System.Single,System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Object)">
      <summary>
            Creates a new surface plot, provide Z values, X and Y ranges
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="Z">Positions data for the grid points, matrix of size [m x n]</param>
      <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1]</param>
      <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0]</param>
      <param name="C">[optional] Colors for the grid points, size [m x n x [1|4]], default: colormapped heights (Z-values)</param>
      <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
      <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
      <param name="colorsDataRange">[optional] if not null, the lower (Item1) and the upper (Item2) limit of the inherent data range of the
            <paramref name="C" /> parameter in colormap mode. If null, the maximum and the minimum values are taken from <paramref name="C" />.</param>
      <remarks>
        <para>The <paramref name="Z" />, <paramref name="X" /> and <paramref name="Y" /> parameters define the grid positions of the new surface. Z defines 
            the size of the surface. X and Y define the position of the surface on the X and Y axes respectively. X and Y can be vectors or matrices. If X is provided 
            as vector, it gives the X coordinates of the grid points which are replicated for all rows. If Y is a vector, it defines the Y coords for the grid
            points for all columns respectively. If X or Y are given as matrices, they define the X and/or Y coordinates of all individual grid points explicitely.
            This allows the creation of arbitrary parametric surfaces. </para>
        <para>If either of X or Y is null, the coords are computed based on a regular spacing, starting at 0 and running along the X and Y axis with a step width of 1.</para>
        <para>The optional <paramref name="C" /> parameter is used to define the coloring of each grid point. One of the 
            following modes are available: 
            <list type="bullet"><item><paramref name="C" /> is an 3d array of size [m x n x [3|4]] with individual RGB[A] color tupels for every grid point.</item><item>If <paramref name="C" /> is a matrix of size [m x n], the values are mapped into the current colormap. If 
            the current colormap is changed, the resulting colors will change as well. Values of <paramref name="C" /> are mapped onto  
            the colorrange of the current colormap. <paramref name="colorsDataRange" /> can be used to adjust the data range (min,max) used for mapping.</item></list></para>
        <para>The optional <paramref name="colormap" /> parameter can be used to set the surfaces colormap to an individual map. If this 
            parameter is ommitted, the predefined 'ILNumerics' colormap is taken by default.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.#ctor(System.Func{System.Single,System.Single,System.Single},System.Single,System.Single,System.Int32,System.Single,System.Single,System.Int32,System.Func{System.Single,System.Single,System.Single},System.Tuple{System.Single,System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Object)">
      <summary>
             Creates a new surface plot from a function delegate
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZFunc">function delegate or lambda expression for computing the Z values out of X and Y parameters</param>
      <param name="xmin">[optional] minimal x axis range</param>
      <param name="xmax">[optional] maximum x axis range</param>
      <param name="xlen">[optional] number of steps on the x axis</param>
      <param name="ymin">[optional] minimal y axis range</param>
      <param name="ymax">[optional] maximum y axis range</param>
      <param name="ylen">[optional] number of steps on the y axis</param>
      <param name="CFunc">[optional] function delegate or lambda expression for computing the colors for the grid point (x,y) tuples; default: colormapped heights (Z-values)</param>
      <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
      <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
      <param name="colorsDataRange">[optional] if not null, the lower (Item1) and the upper (Item2) limit of the inherent data range of the
             <paramref name="C" /> parameter in colormap mode. If null, the maximum and the minimum values are taken from <paramref name="C" />.</param>
      <remarks>
        <para>The surface is constructed by evaluating <paramref name="ZFunc" /> for every grid point. The optional parameters xmin, xmax and xlen define the grid points 
             for the X axis; ymin, ymax and ylen for the Y axis accordingly. Axes generate 50 points running from -5 to 5 per default.</para>
        <para>If either of X or Y is null, the coords are computed based on a regular spacing, starting at 0 and running along the X and Y axis with a step width of 1.</para>
        <para>The optional <paramref name="CFunc" /> parameter is used to define the coloring of each grid point. If omitted, the Z values (heights) are mapped to the current colormap. 
             Otherwise, the CFunc is evaluated for each grid point. 
             </para>
        <para>The optional <paramref name="colormap" /> parameter can be used to set the surfaces colormap to an individual map. If this 
             parameter is ommitted, the predefined 'ILNumerics' colormap is taken by default.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <example>The following example generates a surface from a lambda expression. The Z values are computed from the x,y tuples on every gridpoint from the function: 
             <code>(x, y) =&gt; (float)(Math.Sin(x) * Math.Cos(y) * Math.Exp(-(x * x * y * y) / 4)</code><para>The ranges for the X and Y axes are left at their defaults. The colors are generated from the function 
             <code>(x,y) =&gt; x * y</code></para><para>The complete scene setup: </para><code>        
            private void ilPanel1_Load(object sender, EventArgs e) {
                var scene = new ILScene() {
                    new ILPlotCube(twoDMode: false) {
                        new ILSurface((x, y) =&gt; (float)(Math.Sin(x) * Math.Cos(y) * Math.Exp(-(x * x * y * y) / 4)), 
                                  CFunc: (x,y) =&gt; x * y, colormap: Colormaps.Jet) { 
                            UseLighting = true,
                            Children = { new ILColorbar() },
                        }
                    } 
                };
                ilPanel1.Scene = scene;
            }</code><para>Download this example within <a href="http://ilnumerics.net/ilcc.php?ilc=ic05e51">ILView</a> and modify it interactively.</para></example>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.Resize(System.Int32,System.Int32)">
      <summary>
            Resize the grid size (number of rows and columns)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="rows">number of rows</param>
      <param name="columns">number of columns</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.UpdateSolidColor(System.Drawing.Color,ILNumerics.ILInArray{System.Single})">
      <summary>
            Update positions data [optional] and switches to solid coloring mode
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZXYPositions">[optional] positions data matrix, size: [M x N x [1|2|3]] with Z, [X and Y] values, resizing allowed</param>
      <param name="solidColor">Color for the surface fill</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.UpdateRGBA(ILNumerics.ILInArray{System.Single},ILNumerics.ILInArray{System.Single})">
      <summary>
            Update positions data [optional] and switches to solid coloring mode
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZXYPositions">[optional] positions data matrix, size: [M x N x [1|2|3]] with Z, [X and Y] values, resizing allowed</param>
      <param name="RGBAcolors">RGBA color component tuples for every grid point, size [M x N x [3|4]]</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.UpdateColormapped(ILNumerics.ILInArray{System.Single},ILNumerics.Drawing.Plotting.ILColormap,System.Tuple{System.Single,System.Single},ILNumerics.ILInArray{System.Single},ILNumerics.Drawing.ILLimits)">
      <summary>
            Update positions data [optional] and color data [optional], switch to colormapped mode
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ZXYPositions">[optional] positions data matrix, size: [M x N x [1|2|3]] with Z, [X and Y] values, resizing allowed</param>
      <param name="colormap">[optional] if given, the current colormap will be changed</param>
      <param name="dataRange">[optional] if defined, this range is used to map data values to the colormap instead of min/max(dataValues)</param>
      <param name="dataValues">[optional] matrix [M x N], with data values. If ommited: use Z values as data values</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILSurface.Copy">
      <summary>
            Create a copy of the surface. This function is used internally.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.DataRange">
      <summary>
            Get the current data range which corresponds to the current colormap or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Colormap">
      <summary>
            Gets the colormap used for coloring in colormapped modes or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.UseLighting">
      <summary>
            Determines, if the surface plot utilizes lighting. Default: Auto (true for individual color mode, false for colormap mode)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Lighting makes it potentially harder to match the colors of the surface with the colorscale of the colormap /colorbar. 
            Therefore, for those surfaces which are using a colormap to determine the surface colors, lighting is disabled per default. For all 
            other surfaces, ligthing is enabled by default. By assigning a value to this property, this behavior can be overwritten.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Wireframe">
      <summary>
            Gets a reference to the lines shape representing the wireframes of the surface
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Fill">
      <summary>
            Gets a reference to the triangles shape representing the fill area of the surface
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Rows">
      <summary>
            Gets the number of rows currently held in the surface, readonly
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Columns">
      <summary>
            Gets the number of columns currently held in the surface, readonly
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Positions">
      <summary>
            Gets the positioning values for this surface or sets them
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The coords property converts the underlying buffer data to/from matrix for X,Y and Z values. No data are 
            stored redundantly. Therefore, the conversion may introduces a workload if frequently used.</para>
        <para>The array returned on get access reflects the data stored in the vertex buffers of the shapes. It is a lazy copy 
            on write clone and therefore cannot be used to alter the data in the buffers. In order to alter the surface data, 
            one must query the complete data set, do all modifications on the array returned and store the full array back by
            using the set accessor. </para>
        <para>Assigning data to the <c>Positions</c> property is a buffer changing operation. Therefore, one must call 
            <see cref="M:ILNumerics.Drawing.ILGroup.Configure(System.Boolean,System.Boolean)" /> on the group node or any group node above in order to populate the changes 
            for rendering.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILSurface.Colors">
      <summary>
            Gets the coloring values for this surface or sets them
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The color array returned on get access and the one expected on set access contain coloring information for 
            every grid point of the surface. The array has the size [m x n x 4] or [m x n x 1], where m and n are the number of rows and columns of 
            the surface grid. The size of the 3rd dimension determines the coloring mode of the surface: 
            <list type="bullet"><item>Providing an array of the size [m x n x <b>4</b>] will set the surface in RGBA mode. Individual RBGA tuples are expected for each grid point. 
            The surface will have lighting enabled and the colorbar / colormap will get disabled.</item><item>Providing a matrix of size [m x n] will set the surface in colormapped mode. Values are taken as <i>references</i> into the current colormap. If 
            later the current colormap is changed, the resulting colors will change as well. Values of the matrix are mapped onto  
            the colorrange of the current colormap. <see cref="P:ILNumerics.Drawing.Plotting.ILSurface.DataRange" /> can be used to adjust the data range used for mapping. Lighting will be disabled.</item><item>Providing an empty array will cause the surface to switch to solid coloring. Neither the colormap nor individual color values are used for 
            coloring the surface. The colors of the <see cref="P:ILNumerics.Drawing.Plotting.ILSurface.Fill" /> area and the <see cref="P:ILNumerics.Drawing.Plotting.ILSurface.Wireframe" /> 
            still can individually get configured by accessing its individual <see cref="!:ILNumerics.Drawing.ILNode.Color" /> or <see cref="P:ILNumerics.Drawing.ILShape.Colors" /> properties. 
            Lighting will be enabled, the colormap will be disabled.</item></list></para>
        <para>The array returned on get access reflects the state of the surface. In RGBA mode, the array reflects the data stored in the 
            vertex colors buffer of the shapes. In colormapped mode the value reflects the indices data used to map the grid points to the current colormap.</para>
        <para>The array returned cannot be used to alter the data in the buffers directly. In order to alter the surface data, 
            one must query the complete data set, do all modifications on the array returned and store the full array back by
            using the set accessor.</para>
        <para>Assigning data to the <c>Colors</c> property is a buffer changing operation. Therefore, one must call the derived  
            <see cref="M:ILNumerics.Drawing.ILGroup.Configure(System.Boolean,System.Boolean)" /> on the group node or any group node above in order to populate changes made 
            to the rendering output.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILSurface.ColorModes.Solid">
      <summary>
            All surface grid points have the same color
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILSurface.ColorModes.Colormapped">
      <summary>
            Colors of the surface are mapped from a colormap
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILSurface.ColorModes.RBGA">
      <summary>
            Surface grid points are individually colored
            </summary>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILAutoSizeGroup">
      <summary>
            Container class for arbitrary 3D nodes, provides a local coordinate system for drawing inside a specific screen rectangle
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The class ensures, that the projection of a virtual cube (of size [-1 ... 1] in each direction) is 
            limited to the screen rectangle given in 'Rect'. The current camera position and projection is taken into account. 
            Therefore, any transformation does only affect the local driver and not the global scene.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAutoSizeGroup.ScreenRect">
      <summary>
            Rectangular area of the controls surface the rendering of all childs controls is limited to, range 0..1
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILAxis">
      <summary>
            The class implements an axis for displaying scaling information
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.AxisGroupTag">
      <summary>
            Default node tag for new instances of ILAxis
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.TicksTag">
      <summary>
            Default node tag for new instances of axis' ticks collection, default: 'TicksCollectionGroup'
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.LabelTag">
      <summary>
            Default node tag for new instances of axis' label, default: 'AxesLabel'
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.ScaleLabelTag">
      <summary>
            Default node tag for new instances of axis' scale label, default: 'ScaleLabel'
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.GridMajorLinesTag">
      <summary>
            Default node tag for new instances of axis' grid major lines, default: 'GridMajorLines'
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.GridMinorLinesTag">
      <summary>
            Default node tag for new instances of axis' grid minor lines, default: 'GridMinorLines'
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.TickLabelPadding">
      <summary>
            Padding between individual ticks, default: 7
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.TickLabelMargin">
      <summary>
            Margin around tick labels as fraction of Ticks.DefaultLabel.Font.Height; default: 0.33f
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.DefaultLabelPosition">
      <summary>
            The relative position of the axis main label, if LabelPosition is null. Default: follow axis at (0.5,1) (axis center, close to tick label)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxis.DefaultScaleLabelPosition">
      <summary>
            The relative position of the axis tick scale label, if ScaleLabelPosition is null. Default: follow axis at (1,1) (upper axis end, close to tick label)
            </summary>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.DataProviderID">
      <summary>
            Gets/ sets the id of the data provider this axis retrieves its data from
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.DataProvider">
      <summary>
            The object providing neccessary data for this axis; default: first IILAxisDataProvider on the path up to the root
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.LabelAnchor">
      <summary>
            Anchor for the main axis label, range: (0,0)..(1,1); null: automatic
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This value overrides any setting of the Label.Anchor property.
            <para>Leaving this value to <code>null</code> will automatically find a good looking setting according to the current orientation and position 
            of the label.</para><para>Custom settings of this property align the labels anchor point relative to the labels size. (0,0) is the upper left corner of the label, 
            (1,1) corresponds to the lower right corner. The anchor point is addressed by the position and used as reference point for any rotation of the 
            label.</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.ScaleLabelAnchor">
      <summary>
            Anchor for the axis scale label, range: 0..1, null: automatic (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This value overrides any setting of the ScaleLabel.Anchor property!
            <para>Leaving this value to <code>null</code> will automatically find a good looking setting 
            according to the current orientation and position of the label and the current position of 
            the main label.</para><para>A custom setting of this property aligns the labels anchor point relative to the 
            scale labels size. (0,0) is the upper left corner of the label, 
            (1,1) corresponds to the lower right corner. The anchor point is addressed by the position 
            and used as reference point for any rotation of the label. See <see cref="T:ILNumerics.Drawing.ILLabel" /> for <code>ILLabel.Anchor</code> usage.</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.LabelPosition">
      <summary>
            Default position of the label relative to the current axis position, size and orientation; null: automatic (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This value overrides any setting of the Label.Position property.
            <para>Leaving this value to <code>null</code> will automatically find a good looking setting according to the current orientation and position 
            of the axis.</para><para>Custom settings of this property position the labels anchor point relative to the axis orientation and position. </para><para>The X coordinate corresponds to the length of the axis with 0 being the lower axis end (i.e. the end with the lower value) and 1 being the
            upper axis end.</para><para>The Y coordinate corresponds to the direction pointing outside along the ticks direction perpendicular to the axis. 0 corresponds to a 
            position on the axis line, 1 corresponds to the distance along that direction, which equals the tick length plus the size of the tick label.</para><para>Note, the relevant size of the tick label depend on the current roation of the axis, for vertical axes, the width of the label is commonly 
            more relevant than the height. This is taken into account automatically, so a setting of (0,1) will place the label always on the lower end and 
            outside of the tick labels area - regardless of the axis orientation.</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.ScaleLabelPosition">
      <summary>
            Position of the scale label relative to the current axis position, size and orientation; null: automatic (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This value overrides any setting of the ScaleLabel.Position property.
            <para>Leaving this value to <code>null</code> will automatically find a good looking setting according to the current orientation and position 
            of the axis and the current position of the main axis label.</para><para>Custom settings of this property position the scale labels anchor point relative to the axis orientation and position. </para><para>The X coordinate corresponds to the length of the axis with 0 being the lower axis end (i.e. the end with the lower value) and 1 being the
            upper axis end.</para><para>The Y coordinate corresponds to the direction pointing outside along the ticks direction perpendicular to the axis. 0 corresponds to a 
            position on the axis line, 1 corresponds to the distance along that direction, which equals the tick length plus the size of the tick label.</para><para>Note, the relevant size of the tick label depend on the current roation of the axis, for vertical axes, the width of the label is usually 
            more relevant than the height. This is taken into account automatically, so a setting of (0,1.1) will place the label always on the lower end and 
            outside of the tick labels area - regardless of the axis orientation.</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.LabelRotation">
      <summary>
            Rotation for the main axis label; null: the label follows the axis orientation (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>If this property is null the axis main label will always follow the orientation of this axis (default). Otherwise, the value set to LabelRotation 
            will define the (fixed) rotation value for the main axis label.</para>
        <para>This property overrides any value may be configured for the Label.Rotation property.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.AxisName">
      <summary>
            Get the type of the axis (XAxis, YAxis or ZAxis) or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Position">
      <summary>
            Gets the axis position or sets it. The position is the start/lower end of the axis. null: automatic (default)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Direction">
      <summary>
            The direction of the axis. Default: automatic setting according to the axis name (XAxis, YAxis or ZAxis)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Min">
      <summary>
            The minimum value for the axis range, if this property is not null, its value will override the actual value 
            taken from the assigned data container within the plot cube. Default: null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Max">
      <summary>
            The maximum value for the axis range, if this property is not null, its value will override the actual value 
            taken from the assigned data container within the plot cube. Default: null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Label">
      <summary>
            Access the axis main label for configuration
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.ScaleLabel">
      <summary>
            Access the axis scale label for configuration.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The scale label displays the tick value scale factor for abbreviated tick values outside of the allowed display range width.
            Individual values for the ScaleLabel.Position will be ignored. The scale label is always displayed at the position of the tick with the lowest screen Y coordinate.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.Ticks">
      <summary>
            Access to the ticks collection group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.GridMajor">
      <summary>
            Major grid lines for axes ticks
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxis.GridMinor">
      <summary>
            Minor grid lines for axes ticks
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxisCollection.AUTOAXIS_PREFER_LENGTH_OVER_POSITION_FACTOR">
      <summary>
            Length difference threshold for choosing an axis position candidate based on its length rather than its position. Default: 3
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxisCollection.AUTOAXIS_NON_HULL_SCREEN_POSITION">
      <summary>
            Prefered position of axis which do not lay on the hull of the unit cube. Clip coordinates. Default: (1,-1) (lower right outside region)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxisCollection.AUTOAXIS_HULL_SCREEN_POSITION">
      <summary>
            Prefered position of axis which exist on the hull of the unit cube. Clip coordinates. Default: (0.45,1) (lower left corner)
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxisCollection.DefaultTag">
      <summary>
            Tag used to identify the object within the scene graph 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILAxisCollection.Graphics">
      <summary>
            Default helper graphics instance; used to measure string extends
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILAxisCollection.#ctor(ILNumerics.Drawing.Plotting.IILAxisDataProvider,System.Object)">
      <summary>
            Create new Axis Collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="plotContainer">[optional] IILAxisDataProvider to be used to retrieve axis' data from; default: null (take the first provider found on the path up to the root node)</param>
      <param name="tag">[optional] tag used to identify the object within the scene graph</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILAxisCollection.Add(ILNumerics.Drawing.Plotting.ILAxis)">
      <summary>
            Add new axis to the axes collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="axis">the axis to be added</param>
      <returns>axis added to this collection (might differ from <paramref name="axis" /> provided)</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILAxisCollection.Remove(ILNumerics.Drawing.Plotting.ILAxis)">
      <summary>
            Remove an axis from the collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="axis"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxisCollection.Item(ILNumerics.Drawing.AxisNames)">
      <summary>
            Gives the first axis with matching axis name (XAxis/YAxis/ZAxis) or null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxisCollection.XAxis">
      <summary>
            Give first XAxis from the axis collection, or null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxisCollection.YAxis">
      <summary>
            Give first YAxis from the axis collection, or null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILAxisCollection.ZAxis">
      <summary>
            Give first ZAxis from the axis collection, or null
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILAxisCollection.Computation.hull(ILNumerics.ILInArray{System.Single})">
      <summary>
            Gives indices of vertices in <paramref name="points" /> which form a convex hull
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="points">vertices, 2D coordinates, 2 rows, n columns</param>
      <returns>indices of hull of points</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILColorbar">
      <summary>
            Colorbar objects are used to visualize colormaps
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Colorbars are added to arbitrary object groups, supporting the IILColormapProvider interface. <see cref="T:ILNumerics.Drawing.Plotting.ILSurface" /> is a common example. 
            They visualize the colormap and the data range mapped to the colors for the object.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILColorbar.ColorFillWidth">
      <summary>
            Gets or sets the width of the inner colored bar area; fractions / multiples of the font height in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>As measure of the inner colored bar width, the height of the font for the tick labels is used. If the font gets resized, the bar width does so automatically. 
            The tick label font size is determined by ILColorbar.Axis.Ticks.DefaultLabel.Font.Height<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILColorbar.Padding">
      <summary>
            Padding between inner elements of the colorbar and the outer border in units defined by PaddingXUnit and PaddingYUnit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILLegend">
      <summary>
            Legend object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegend.LegendTag">
      <summary>
            Tag used to identify legends in the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLegend.ItemsGroupTag">
      <summary>
            Tag used to identify legend item area group within the scene graph
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegend.#ctor(System.String[])">
      <summary>
            Create legend object for any suitable plot object in the plot cube; provide label text for all items
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="labels">item label text strings</param>
      <remarks>
        <para>The number of created items depends on the number of elements in labels and the number of plot objects found in the plot cube. 
            The iteration of suitable plot objects in the plot cube is walked. Every object gets a new legend item associated to with the label text given by the 
            corresponding element in <paramref name="labels" />. If the corresponding element in labels is null, the <see cref="P:ILNumerics.Drawing.ILNode.Tag" /> 
            property of the plot object is used as label text instead. </para>
        <para>The iteration of suitable plot objects is acquired from the subtree of that plot cube in the scene, where this legend object is 
            contained within at time of rendering. If the number of suitable objects found is n, the number of legend items created is min(labels.Count, n). 
            If labels is string[0] (empty array) no items are created. If labels is null, items for all suitable objects are created. </para>
        <para>Not all plot objects are suitable objects for display in a legend. Examples of suitable objects are line plots and contour plots.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <seealso cref="M:ILNumerics.Drawing.Plotting.ILLegend.#ctor(ILNumerics.Drawing.ILGroup,System.Collections.Generic.IEnumerable{System.String},System.Object)" />
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegend.#ctor(ILNumerics.Drawing.ILGroup,System.Collections.Generic.IEnumerable{System.String},System.Object)">
      <summary>
            Create legend object for automatic configuration
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="root">[optional] root node of the subtree considered for finding legend items automatically. Default: plot cube this legends is in</param>
      <param name="labels">[optional] label text strings for all items to be displayed</param>
      <param name="tag">[optional] tag used to identify this object in the scene</param>
      <remarks>
        <para>The number of created items depends on the number of elements in labels and the number of plot objects found in the plot cube. 
            The iteration of suitable plot objects below <paramref name="root" /> is walked. Every object gets a new legend item associated to it; the label text is taken from the 
            corresponding element in <paramref name="labels" />. If the corresponding element in labels is null, the <see cref="P:ILNumerics.Drawing.ILNode.Tag" /> 
            property of the plot object is used as label text instead.</para>
        <para>If <paramref name="root" /> is null, the collection of suitable plot objects is acquired from the subtree of the first plot cube in the scene, which lays 
            on the path from the legend up to the scene root at time of rendering. If the number of suitable objects found is n, the number of legend items created is min(labels.Count, n). 
            If labels is string[0] (empty array) no items are created. If labels is null, items for <i>all</i> suitable objects are created. </para>
        <para>Not all plot objects are suitable objects for display in a legend. Examples of suitable objects are line plots and contour plots.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <seealso cref="M:ILNumerics.Drawing.Plotting.ILLegend.#ctor(System.String[])" />
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegend.#ctor(System.Collections.Generic.IEnumerable{ILNumerics.Drawing.Plotting.ILLegendItem},System.Object)">
      <summary>
            Create a new legend object, provide initial legend items
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="items">collection of legend items</param>
      <param name="tag">tag object used to identify the legend in the scene</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegend.Configure(System.Boolean,System.Boolean)">
      <summary>
            Configures the legend initially and after changes to child objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="configureChilds">[optional] triggers childs configuration; default: true</param>
      <param name="configurePath2Root">[optional] triggers parents configuration; default: true</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLegend.Configure">
      <summary>
            update all existing legend items
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegend.LegendItemSize">
      <summary>
            Get or sets the width for the area in pixels where lines &amp; markers are drawn; default: 100px
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegend.RootID">
      <summary>
            Gets the root node of the subtree in the scene, which is considered for finding legend items automatically or sets it. Default: the plot cube containing this legend (null)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegend.LegendItems">
      <summary>
            Gets the collection of (typed) legend items (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegend.Items">
      <summary>
            The collection of node items for display in this legend
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLegend.Padding">
      <summary>
            Spacing between outer border of the legend and the legend items measured in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILLinePlot">
      <summary>
            A class used to visualize 1-,2- and 3 dimensional data as line plots with markers
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLinePlot.LinePlotTag">
      <summary>
            Tag identifying line plots within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLinePlot.MarkerTag">
      <summary>
            Tag identifying markers for line plots within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLinePlot.LineTag">
      <summary>
            Tag identifying individual lines within the line plot
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILLinePlot.NextColors">
      <summary>
            Color enumerator used to color subsequent lines 
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.#ctor(ILNumerics.ILArray{System.Single},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle)">
      <summary>
            Creates a new line plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="positions">1, 2 or 3D positions as column vectors</param>
      <param name="tag">[optionial] tag identifying the plot in the scene</param>
      <param name="lineColor">[optional] color of the line, default: auto</param>
      <param name="lineStyle">[optional] line style, default: solid</param>
      <param name="lineWidth">[optional] line width, default: 1px</param>
      <param name="markerColor">[optional], color for markers, default: auto</param>
      <param name="markerStyle">[optional], marker style, default: none</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.Update(ILNumerics.ILInArray{System.Single})">
      <summary>
            Update positions of the current line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">matrix with new positions for data points in columns</param>
      <remarks>
        <para>This function <b>replaces</b> existing data points with the new datapoints from the <param name="positions">positions</param> parameter</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.ConfigureLegendVisual(ILNumerics.Drawing.ILGroup)">
      <summary>
            Creates visual representation for the line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="renderArea">Root group node for visual output; must provide coord system [0,0,0] -&gt; [1,1,1]</param>
      <remarks>This function is used by legends for rendering<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.ConfigureLegendLabel(ILNumerics.Drawing.ILGroup)">
      <summary>
            Creates textual / label representation for the line
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="renderArea">Root group node for visual output; must provide coord system [0,0,0] -&gt; [1,1,1]</param>
      <remarks>This function is used by legends for rendering<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.GetID">
      <summary>
            Gets the Id of the line plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.GetVersion">
      <summary>
            Gets the modification version of the line plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILLinePlot.CreateXPlots(ILNumerics.ILInArray{System.Single},System.Collections.Generic.IEnumerable{System.Drawing.Color},System.Collections.Generic.IEnumerable{ILNumerics.Drawing.DashStyle},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{ILNumerics.Drawing.MarkerStyle})">
      <summary>
            Creates a new X-line plot for every row in A
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="A">data matrix with individual line plot data in rows</param>
      <param name="lineColors">[optional] defines colors for lines, plots without corresponding elements get default colors</param>
      <param name="lineStyles">[optional] defines dash styles, plots without corresponding elements are drawn as solid line</param>
      <param name="lineWidth">[optional] defines line width, plots without corresponding elements are drawn as 1px lines</param>
      <param name="markers">[optional] defines marker styles, plots without corresponding elements are drawn without markers</param>
      <returns>Group node containing all line plots created</returns>
      <remarks>The group node returned contains one line plot for every row in A. 
            Every line plot gets a tag according to the following naming scheme: 'LinePlotXXXX', 
            where XXXX corresponds to the row index in A.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLinePlot.Line">
      <summary>
            Gets access to the line of the line plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLinePlot.Marker">
      <summary>
            Gets access to the marker of the line plot
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLinePlot.Positions">
      <summary>
            Provides positions of line vertices
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This function is used by markers for rendering<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILLinePlot.Indices">
      <summary>
            Provides indices of line vertices
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This function is used by markers for rendering<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILMarker.Size">
      <summary>
            Get/set the size of the marker in pixels, default: 9
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILMarker.Position">
      <summary>
            Get/set the position of the marker in world coords
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILMarker.Fill">
      <summary>
            Get a reference to the triangles shape which represents the inner marker area
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILMarker.Border">
      <summary>
            Gets a reference to the line shape which represents the marker border
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILMarker.Style">
      <summary>
            Gets the style of the marker or sets it.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCube.DefaultTag">
      <summary>
            Default tag for the plot box group node itself
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCube.CameraDefaultTag">
      <summary>
            Default tag for the camera node
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCube.MinZoomDragLimit">
      <summary>
            Get the mouse position distance threshold in pixels before a drag operation is triggered
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILPlotCube.Add``1(``0,System.Object,System.Boolean)">
      <summary>
            Add an object to the first plots data container of this cube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <typeparam name="T">plot object type</typeparam>
      <param name="node">new plot object</param>
      <param name="tag">[optional] tag identifying the new plot object in the scene</param>
      <returns>The new object added to the scene</returns>
      <remarks>This override redirects Add requests to the first plot data container object within the plot cube.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILPlotCube.AddDataGroup(System.Object)">
      <summary>
            Add a new data group to the data groups of the plot cube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">[optional] tag used to identify the data group within the scene graph</param>
      <returns>the newly created plot cube data group</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.TwoDMode">
      <summary>
            Determines, if this plot cube should be optimized for 2D content (true, default) or for 3D content (false)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.AllowPan">
      <summary>
            Determines if users are allowed to move the scene interactively
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.AllowRotation">
      <summary>
            Determines if users are allowed to rotate the scene interactively
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.AllowZoom">
      <summary>
            Determines if users are allowed to zoom the scene interactively
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Rotation">
      <summary>
            Rotation matrix used to rotate the plot cube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.ZoomRectangle">
      <summary>
            Access to the lines for the zoom rectangle in interactive 2D mode
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.ScaleGroup">
      <summary>
            helper node holding box lines, axes and plots data group, scales the plot cube screen rect area
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.AutoScaleOnAdd">
      <summary>
            Automatically expand the plotting view limits when a larger new plot is added
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Axes">
      <summary>
            Gets access to the axes collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.ScaleModes">
      <summary>
            Gets the scale modes collection, used to determine linear / logarithmic scales for eache axis
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Limits">
      <summary>
            gets / sets the limits for the main plot cube axes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Lines">
      <summary>
            Allows access to the cube main lines for arbitrary configuration
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Plots">
      <summary>
            Gets the collection of the first (default) plot cube data group, hosting the plot objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.DataScreenRect">
      <summary>
            Gets the screen recangle of the data cube containing the plots or sets it, default: automatic. range [0..1] of the container.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>The data screen rectangle marks the rectangular area on the rendering surface, where the plots are contained. 
            This area depends on the rotation of the plots and does only take the extend of the (rotated and projected) plots within the
            plot cube into account. The space used by labels and ticks are not considered here.
            <para>Per default, the ILNumerics plot cube does automatically determine a good setting in order to make all plot cube 
            elements (ticks &amp; labels) visible. However, for the purpose of aligning a plot cube with another plot cube, it might be helpful to choose the 
            extend manually. </para><para>Note, the rectangle is given in relative coordinates of X and Y within the plot cube screen rect area, as determined by 
            <see cref="P:ILNumerics.Drawing.ILCamera.ScreenRect" />. (0,0) is the upper left corner of the rectangle within the one defined by ScreenRect. </para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Children">
      <summary>
            The collection of plots contained in this plot cubes first data group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCube.Childs">
      <summary>
            The collection of plots contained in this plot cubes first data group
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILPlotCubeDataGroup.Reset">
      <summary>
            Reset current view limits to show all content
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup">
      <summary>
            The class scales the plot cube data area to always fit into the PlotCubeScreeRect rectangle.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup.LinesTag">
      <summary>
            Default tag for the plot cube bounding box lines node
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup.PlotsTag">
      <summary>
            Tag for the Plots group node
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup.AxesTag">
      <summary>
            Tag used to identify the axes collection within the scene graph node
            </summary>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup.CalculateTransform(ILNumerics.Drawing.ILRenderParameter,System.Drawing.RectangleF)">
      <summary>
            scales and translates the the screen extends of the group node according to the DataScreenRect property
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameter">current render parameter</param>
      <param name="screenRect">current setting of DataScreeRect or default/ auto screen rect</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILPlotCubeScaleGroup.DataScreenRect">
      <summary>
            If set: the extend of the screen area used by the plot cube internals, relative viewport coordinates [0,0] -&gt; [1,1]. See: ILPlotCube.DataScreeRect
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Plotting.ILTickCollection">
      <summary>
            The class represents the collection of ticks for axis objects and is used in ILPlotCube
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultFontFunc">
      <summary>
            Font creation function used for initial fonts for tick labels; default: 
            gives the default font for all labels (Helvetica, 10pt) 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.TickLinesTag">
      <summary>
            Tag identifying the tick lines within the scene graph 
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.TickLabelTag">
      <summary>
            Tag identifying the tick label within the scene graph
            </summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultTickCreationFunc">
      <summary>
            Default tick creation function for all axis objects with <see cref="T:ILNumerics.Drawing.TickMode" /> set to Automatic. 
            </summary>
      <remarks>
        <para>This defaults to the static <see cref="M:ILNumerics.Drawing.Plotting.ILTickCollection.CreateTicksAuto(System.Single,System.Single,System.Int32,ILNumerics.Drawing.Plotting.ILAxis,ILNumerics.Drawing.AxisScale)" /> function.</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.TickCreationFunc">
      <summary>
            Function used to control the creation of ticks for this axis. Default: <see cref="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultTickCreationFunc" /></summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.TickCreationFuncEx">
      <summary>
            Function used to control the creation of ticks for this axis. Default: <see cref="M:ILNumerics.Drawing.Plotting.ILTickCollection.CreateTicksAuto(System.Single,System.Single,System.Int32,ILNumerics.Drawing.Plotting.ILAxis,ILNumerics.Drawing.AxisScale)" /></summary>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.LabelTransformFunc">
      <summary>
            Function used to control the creation of tick labels from position values. Default: <see cref="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultLabelTransformFunc" /></summary>
      <remarks>
        <para>The Func defines the following input parameters:</para>
        <list type="bullets">
          <item>Index (int) - the index of the tick within the collection of all visible ticks; 0-based indexing</item>
          <item>The position value (float) - number used to position the tick along the axis scale</item>
        </list>
        <para>The function returns a string which is directly used to display the tick.</para>
        <para>In order to control the creation of tick labels and/or to implement custom tick filters, one may assign 
            custom (anonymous) functions to <code>LabelTransformFunc</code>.</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultLabelTransformFunc">
      <summary>
            Default function used to transform tick positions into tick label texts. It applies a simple number transform, 
            taking the current culture into account.
            </summary>
      <remarks>
        <para>The Func defines the following input parameters:</para>
        <list type="bullets">
          <item>Index (int) - the index of the tick within the collection of all visible ticks; 0-based indexing</item>
          <item>The position value (float) - number used to position the tick along the axis scale</item>
        </list>
        <para>The function returns a string which is directly used to display the tick. It is per default used by <code>LabelTransformFunc</code>.</para>
        <para>In order to control the creation of tick labels and/or to implement custom tick filters, one may assign a
            custom (anonymous) function to <code>LabelTransformFunc</code>.</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.Add(ILNumerics.Drawing.Plotting.ILTick)">
      <summary>
            Add a new tick to the tick collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tick">new tick object</param>
      <returns>the newly added tick object</returns>
      <remarks>
        <para>The tick object returned is not guaranteed to be identical to the one given as <paramref name="tick" /> argument.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.Add(System.Single,ILNumerics.Drawing.ILLabel)">
      <summary>
            Add a new tick to the tick collection by providing position and a label instance
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="position">tick position</param>
      <param name="label">label object to be used for rendering the tick label</param>
      <returns>newly created tick object</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.Add(System.Single,System.String)">
      <summary>
            Add a new tick to the tick collection by providing position and a label text
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="position">tick position</param>
      <param name="label">text to be used as tick label</param>
      <returns>newly created tick object</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.Clear">
      <summary>
            Remove all ticks from the tick collection
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.Replace(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
            Replace all existing ticks with a collection of new ticks; does not change current tick Mode
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="ticks">collection of position values</param>
      <remarks>
        <para>Every item in <paramref name="ticks" /> creates a new tick object with the value of the item as position for the new tick.</para>
        <para>Tick labels are automatically created by transforming the position value into a string. Therefore, the <see cref="F:ILNumerics.Drawing.Plotting.ILTickCollection.LabelTransformFunc" />
            function is used (which by default references <see cref="F:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultLabelTransformFunc" />). </para>
        <para>In order to control the label text creation process, set the <see cref="F:ILNumerics.Drawing.Plotting.ILTickCollection.LabelTransformFunc" /> to a custom function.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:ILNumerics.Drawing.Plotting.ILTickCollection.Replace(System.Collections.Generic.IEnumerable{ILNumerics.Drawing.Plotting.ILTick})" -->
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.niceNumber(System.Double,System.Boolean)">
      <summary>
            create "nice" number in fractions of 2 or 5
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="value">value</param>
      <returns>This code was adopted from Paul Heckbert
            from "Graphics Gems", Academic Press, 1990. </returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.CreateTicksAuto(System.Single,System.Single,System.Int32,ILNumerics.Drawing.Plotting.ILAxis,ILNumerics.Drawing.AxisScale)">
      <summary>
            Create nice numbers for ticks for arbitrary axes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="min">lower axis range limit </param>
      <param name="max">upper axis range limit</param>
      <param name="numberTicks">optimal number of ticks (hint)</param>
      <param name="axis">The axis object to create the ticks for (not used)</param>
      <param name="scale">The scaling of the axis, log / lin</param>
      <returns>Enumerable of newly created ticks</returns>
      <remarks>
        <para>This method provides the default implementation of a tick generator for arbitrary axes. It handles logarithmic and 
            linear axes of arbitrary range and size. By returning a collection of <code>ILTick</code> objects, it defines 
            all properties of every tick: position, label text, label properties, major/ minor tick etc.</para>
        <para></para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.CreateTicksAuto(System.Single,System.Single,System.Int32)">
      <summary>
            Default ticks creation function, produce nice numbers for linear axes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="min">minimal axis range</param>
      <param name="max">maximum axis range</param>
      <param name="numberTicks">number of ticks (hint)</param>
      <returns>list of nice ticks positions</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.GetEnumerator">
      <summary>
            Give an enumerator for this tick collection, allows the use inside foreach constructs
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Plotting.ILTickCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Give an enumerator for this tick collection, allows the use inside foreach constructs
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultLabel">
      <summary>
            The label template used to create new tick labels; provides all settings (color, font, ...)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Changes to the default label instance will immediately affect all existing labels in the tick collection!<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.MaxNumberDigitsShowFull">
      <summary>
            Threshold on number of digits allowed for a tick label before it gets abbreviated and the scale label is shown. Default: 5
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.DefaultTickLabelSize">
      <summary>
            Gets the default size of tick labels in pixels or sets it. Default: actual size of <see cref="!:TickSizeMeasureDefaultTemplate" /> with <see cref="!:DefaultLabel.Font" />.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The property is used for axis configuration and layout. It serves as a placeholder for the size of a tick label and helps 
            positioning other components of the axis relative to that size. One example is the axis main label which per default is placed <b>outside</b>
            of the ticks.</para>
        <para>With custom ticks it might be necessary to modify this value in order to better reflect the actual tick label size.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <seealso cref="P:ILNumerics.Drawing.Plotting.ILTickCollection.MaxNumberDigitsShowFull" />
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Count">
      <summary>
            Gets the current number of ticks in the collection (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Lines">
      <summary>
            Access to the <see cref="T:ILNumerics.Drawing.ILLines" /> shape used for drawing the tick lines
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Mode">
      <summary>
            Gets the tick creation mode or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>For TickMode.Auto the ticks for the axis are created automatically (default). TickMode.Manual allows for custom configuration of the ticks.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Color">
      <summary>
            Gets the color for the lines of the ticks and the main axis line or sets it.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>This property is a shortcut to the Color property of the Lines member which allows further configuration of the lines.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Width">
      <summary>
            Gets the thickness of the tick lines or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The tickness of the lines is measured in pixels on screen.</para>
        <para>This property is a shortcut to the Width property of the Lines member which allows further configuration of the tick lines.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.TickLength">
      <summary>
            Gets/sets the length of the ticks; negative values: flip ticks inside plot cube; unit: fraction of DefaultFont height; default: 0.5f
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>The length is measured in fractions of the current DefaultFont.Height, i.e. a value of 1 will produce a tick length of 
            exactly the height of the DefaultFont.</para>
        <para>Negative values for TickLength will draw the ticks in opposite direction. For 2D plots and colorbars this produces ticks reaching 'inside' the content area.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
      <see cref="P:ILNumerics.Drawing.Plotting.ILTickCollection.LengthLevelFraction" />
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.LengthLevelFraction">
      <summary>
            Gets/sets the fraction used to modify the lenght of the ticks for every tick level. Default: 0.5f
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>LengthLevelFraction is used to scale minor ticks up or down in relation to the major ticks. Minor ticks are created by specifying a level &gt; 0 for a tick. 
            The resulting length for a tick is computed by: len = [TickLength * [LengthLevelFracion]^[Level]]</para>
        <para>A value of 0.5 (default) scales minor ticks (level 1) to half the length of major ticks (level 0).</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Plotting.ILTickCollection.Item(System.Int32)">
      <summary>
            Retrieve a single tick by index; to be used in Manual Tick Mode only!
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="index"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILNodeCollection.Move(System.Int32,System.Int32)">
      <summary>
            moves a node from its current position to a new position
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="currentId">the current position of the node to move</param>
      <param name="targetId">target index of the node, before inserting the new node</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILScene">
      <remarks>The root node of all ILNumerics scene graphs.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.#ctor(ILNumerics.Drawing.ILGroup)">
      <summary>
            Creates a scene from a given scene graph group node
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="root">existing scene graph root</param>
      <remarks>
        <para>This constructor will create <b>a shallow copy</b> of the existing <paramref name="root" /> node and its 
            children. The copy is done efficiently without copying any buffer data.</para>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.#ctor(ILNumerics.Drawing.ILScene)">
      <summary>
            Create a complete shallow copy of the complete scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source">source scene</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.#ctor(System.Boolean)">
      <summary>
            Construct a new empty scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="localScene">True: do not create global defaults (Camera, Light, etc.)</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.IncreaseReference">
      <summary>
            Inrease internal reference counter, to be called when a scene is shared in custom setups (non-IILDriver or non-ILPanel).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>The new reference count for the scene</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.DecreaseReference">
      <summary>
            Decrease internal reference counter, to be called when a scene finishes sharing in custom setups (non-IILDriver or non-ILPanel).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>The new reference count for the scene</returns>
      <remarks>When the reference counter is decreased to 0 the scene gets disposed. This will clear all nodes from its children. 
            If for a node this is the only occurence of the node it gets disposed also.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILScene.Snapshot(System.Int64,ILNumerics.Drawing.ILGroup)">
      <summary>
            create a clone of the current scene state (driver-/render task)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>Clone</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScene.TimeoutLabel">
      <summary>
            The label used to inform the user about any timeout happened (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScene.AmbientLight">
      <summary>
            Gets the ambient light color or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScene.MaxLightIntensity">
      <summary>
            Gets or sets the maximum intensity for ligths, used for scaling global lighting
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScene.Camera">
      <summary>
            Gets a reference to the default camera in the scene
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILScene.Screen">
      <summary>
            Gets a reference to the default Screen2D node of the scene. It establishes a 2D coordinate system.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILCone.#ctor(System.Int32,System.Object)">
      <summary>
            Creates a new cone, bottom radius 1, midpoint at origin, height: 1
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="resolution">number vertices used for the bottom circle</param>
      <param name="tag">[optional] default tag: 'Cone'</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILCylinder.Resolution">
      <summary>
            Gets the resolution used for the creation of this cylinder (readonly)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILDrawable">
      <summary>
            Base class for drawable scene node objects, like shapes and labels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDrawable.#ctor(ILNumerics.Drawing.ILDrawable)">
      <summary>
            Creates a new drawable object as clone of an existing one
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source">Source object</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDrawable.#ctor(System.Object)">
      <summary>
            Creates a new drawable object, alternatively specify a tag (recommended).
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">tag, describing the object</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILDrawable.GetPosition">
      <summary>
            Get the anchor position for this object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>The current anchor position</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILDrawable.Color">
      <summary>
            Any color (except null) will override individual object vertex colors.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILDrawable.IsTransparent">
      <summary>
            determine transparency state for this shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILFringe.Equals(System.Object)">
      <summary>
            Evaluates if this fringe object equals another fringe object
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="obj">The other fringe object</param>
      <returns>True if both fringe objects are equal, based on their properties, false otherwise.</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILFringe.Width">
      <summary>
            Width of the fringe around a glyph
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILFringe.Color">
      <summary>
            Color for the fringe around the characters
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.ILLabel.SmallFontTextRenderingHint">
      <summary>
            Defines a hint for rendering font sizes &lt; 16 points. Default: AntiAliasGridFit
            </summary>
      <remarks>Small font sizes may look blurry, when rendered with antialiasing. Per default, AntiAliasGridFit is selected. Setting this property to 
            <see cref="F:System.Drawing.Text.TextRenderingHint.AntiAlias" /> will generate a more smooth output for small fonts.</remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLabel.#ctor(ILNumerics.Drawing.ILLabel)">
      <summary>
             Copy constructor
             <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="source"></param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILLabel.MeasureSize">
      <summary>
            Measures the size in screen pixels of the current label state
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>size in pixels as SizeF struct</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLabel.DefaultFont">
      <summary>
            Default font for new label objects
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.Configure(System.Boolean,System.Boolean)">
      <summary>
            Configures the shape; must be called after changes to any vertex buffers
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="configureChildren">[optional] configure subtree; default: true</param>
      <param name="configurePath2Root">[optional] configure nodes on the path to the root node; default: true</param>
      <remarks>Configure must be called to populate changes to the driver. If you can be sure, changes will not effect 
            any other shapes, set <paramref name="configureChildren" /> and/or <paramref name="configurePath2Root" /> to true. This 
            limits the configuration to this shape and may gives better performance.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.Dispose">
      <summary>
            Dispose off this shape, release any references to buffer resources
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.Detach">
      <summary>
            Detach this shapes buffers from any shared buffers and allows individual changes
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>This function allows a shape to act completely independent of any other shapes in a scene. 
            After calling Detach() changes to local buffers are save to only effect the appearance of this shape. 
            Therefore, any buffers which have been shared will detach from their source and use up individual storage. 
            However, this new storage is not immediately allocated but only, once changes really arrive ("lazy").<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.GetPosition">
      <summary>
            Get midpoint of the vertex positions
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.OnMouseClick(ILNumerics.Drawing.ILMouseEventArgs)">
      <summary>
            Default mouse click handler, toogles the selection state
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="args">ILNumerics mouse event arguments</param>
      <returns>true if the event should get handled further</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.GetPrimitiveCount">
      <summary>
            Get the number of basic primitives which are configured for this shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>number of basic primitives</returns>
      <remarks>The number of basic primitives returned depend on several factors, like 
            <list type="bullet"><item>The existence of an index buffer and its size</item><item>The shape type (lines, line strip, triangles, -strip or -fan, etc.)</item></list>
            This function returns the number of basic primitives <strong>defined</strong> - regardless of
            how many of them will later really be drawn. Hence, clipping is not considered here.
            <para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILShape.GetIndicesForSorting(ILNumerics.ILInArray{System.Int32})">
      <summary>
            create indices matrix for individually sortable primitives
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <returns>discrete indices matrix/element (indices) buffer storage</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Buffers">
      <summary>
            Get the complete set of buffers for the shape or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Buffer sets contain any buffers for the shape: vertex and index buffers. 
            A buffer set can be shared among multiple shapes in the same way as individual buffers can. Reference 
            counting keeps track of the instances and memory management transparently.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.VerticesPerPrimitive">
      <summary>
            Get the number of vertices every basic primitive type in the shape is composed of
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Colors">
      <summary>
            Get the buffer with individual colors for the shape or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.SpecularColor">
      <summary>
            Get the specular color if the shape is lit or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.EmissionColor">
            Get the emmisive color if the shape is lit or sets it
        </member>
    <member name="P:ILNumerics.Drawing.ILShape.Shininess">
            Get the shininess factor (basically the size of the shiny reflection) if the shape is lit or sets it
        </member>
    <member name="P:ILNumerics.Drawing.ILShape.AutoNormals">
      <summary>
            Specify if the normal vectors for lighting are to be computed automatically; default: true
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Positions">
      <summary>
            Get the buffer with vertex positions or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Normals">
      <summary>
            Get the buffer with vertex normals or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Indices">
      <summary>
            Get the buffer with indices composing basic primitives or sets it
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Type">
      <summary>
            Get the primitive type of this shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Limits">
      <summary>
            Get the bounding box limits for this shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.Selected">
      <summary>
            Determines if this shape is currently in selected state
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILShape.IsTransparent">
      <summary>
            after configuration: determine transparency state for this shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.Width">
      <summary>
            Get/set the width of the lines, default: 1
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.DashStyle">
      <summary>
            Dash style for the lines, default: solid
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.Pattern">
      <summary>
            User defined line stipple pattern for dash style 'UserPattern'
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>the pattern is defined by corresponding bits 
            set in the short value. It may be stretched via the 
            LinePatternScale parameter. Default: 15<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.PatternScale">
      <summary>
            Scaling for line stipple patterns (default: 2.0f)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.Antialiasing">
      <summary>
            Get/set value, if lines are drawn with smooth antialiasing (if possible and supported)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>Smooth edges will be drawn if the driver supports antialiased lines. 
            This sometimes comes with the drawback of the lines apppearing to be 
            thicker. Not all objects support antialiasing. Default value is 'false'.<para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILLines.VerticesPerPrimitive">
      <summary>
            Get the number of vertices used per line: 2
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.Drawing.ILPointLight">
      <summary>
            A light in model coordinates
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPointLight.#ctor(System.Object,ILNumerics.Drawing.Vector3)">
      <summary>
            Creates a new point light
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">[optional] tag identifying the light in the scene</param>
      <param name="position">[optional] position for the new light</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPointLight.Intensity">
      <summary>
            Light intensity, range: [0 (invisible) ... float.MaxValue]. Default: 1
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPointLight.Position">
      <summary>
            Model coords position for the light. Default: [0,0,0]
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPointLight.Color">
      <summary>
            Ligth color, default: Gray
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILPoints.#ctor(System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Create a new points shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag"></param>
      <param name="color">[optional] color for all points, default: red</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILPoints.Size">
      <summary>
            Diameter for all the points in the shape, size in pixels
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTriangles.#ctor(System.Object)">
      <summary>
            Create a new ILTriangles shape
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="tag">[Optional] tag used to identify the shape in the scene. Default: null</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTriangles.Configure(System.Boolean,System.Boolean)">
      <summary>
            Populate changes made to any buffers to the scene used for rendering.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="configureDown">[Optional] Configure all child nodes as well. Default: true</param>
      <param name="configureUp">[Optional] Configure all nodes on the path to root as well. Default: true</param>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTriangles.AutoComputeNormals">
      <summary>
            Trigger recalculation of normal vectors after modifications to the vertices and/or indices buffer.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTriangles.GetSortedAndClippedScreen(ILNumerics.Drawing.ILRenderParameter,ILNumerics.Drawing.SortingMode,System.Boolean)">
      <summary>
            Gets all individual triangles, optionally sorted and clipped at the viewing frustum
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="parameters">Current render parameters, optained by a driver during rendering</param>
      <param name="sorting">[Optional] sort the triangles according to their distances to the camera; default: no sorting</param>
      <param name="frustumClipping">[Optional] perform frustum clipping. Default: no frustum clipping, only custom clipping planes are applied.</param>
      <returns>enumerator for all triangles defined by the shape</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.ILTriangles.VerticesPerPrimitive">
      <summary>
            Number of vertices per triangle: always returns 3
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.ILTriangles.Computation.CreateShapeIndicesIndex(ILNumerics.ILInArray{System.Int32})">
      <summary>
            Creates the index of the shape indices.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="shapeIndices">The shape indices.</param>
      <returns>index of shape indices</returns>
      <remarks>The index of shape indices is used for fast facette lookup while (auto) creating
            the normal vectors for the vertices. Therefore, the index of every vertex used in the shape
            serves as index for a list of those facettes, where that vertex occures.
            <para>TODO: may be replaced by a custom data structure in order to decrease memory requirements?</para><para>[ILNumerics Visualization Engine]</para></remarks>
    </member>
    <member name="T:ILNumerics.Drawing.Shapes">
      <summary>
            The class provides a number of predefined basic shapes for easy assembly of simple scenes.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Shapes.CreateGear(System.Single,System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Create a new gear triangle shape with arbitrary parameters
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="inR">inner radius</param>
      <param name="outR">outer radius between tooths</param>
      <param name="toothR">tooth radius</param>
      <param name="toothCount">number of tooths</param>
      <param name="thickness">thickness of the gear</param>
      <returns>New gear triangles shape</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.Drawing.Shapes.CreateGearWireframe(System.Single,System.Single,System.Single,System.Int32,System.Single)">
      <summary>
            Create a new gear wireframe lines shape with arbitrary parameters
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <param name="inR">inner radius</param>
      <param name="outR">outer radius between tooths</param>
      <param name="toothR">tooth radius</param>
      <param name="toothCount">number of tooths</param>
      <param name="thickness">thickness of the gear</param>
      <returns>New gear wireframe as lines shape</returns>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Disc50">
      <summary>
            Gets a disc as triangle fan shape, 50 points resolution, single colored: gray, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Disc10">
      <summary>
            Gets a disc as triangle fan shape, 10 points resolution, single colored: gray, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Disc200">
      <summary>
            Gets a disc as triangle fan shape, 200 points resolution, single colored: gray, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Disc100">
      <summary>
            Gets a disc as triangle fan shape, 100 points resolution, single colored: gray, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Circle10">
      <summary>
            Gets a circle as line strip shape, 10 points resolution, single colored: black, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Circle50">
      <summary>
            Gets a circle as line strip shape, 50 points resolution, single colored: black, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Circle100">
      <summary>
            Gets a circle as line strip shape, 100 points resolution, single colored: black, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Circle200">
      <summary>
            Gets a circle as line strip shape, 100 points resolution, single colored: black, origin: 0;0;0, radius: 1.
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.HemisphereWireframe">
      <summary>
            Get a hemisphere wireframe lines shape, single colored: green
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Hemisphere">
      <summary>
            Get a hemisphere triangles shape, single colored: green, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere5Wireframe">
      <summary>
            Get a detailed sphere wireframe lines shape, single colored: green
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.SphereWireframe">
      <summary>
            Get a regular sphere wireframe lines shape, single colored: green
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere3Wireframe">
      <summary>
            Get a rougher sphere wireframe lines shape, single colored: green
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere2Wireframe">
      <summary>
            Get a rough sphere wireframe lines shape, single colored: green
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere5">
      <summary>
            Get a detailed sphere triangles shape, single colored: green, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere">
      <summary>
            Get a regular sphere triangles shape, single colored: green, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere3">
      <summary>
            Get a rougher sphere triangles shape, single colored: green, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Sphere2">
      <summary>
            Get a rough sphere triangles shape, single colored: green, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cone100">
      <summary>
            Creates the hull of a cone, bottom radius: 1, height: 1, resolution: 100
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cone50">
      <summary>
            Creates the hull of a cone, bottom radius: 1, height: 1, resolution: 50
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cone200">
      <summary>
            Creates the hull of a cone, bottom radius: 1, height: 1, resolution: 200
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cylinder100">
      <summary>
            Creates the hull of a cylinder around the z axis, bottom radius: 1, length: 1, origin: (0,0,0), resolution: 100
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cylinder50">
      <summary>
            Creates the hull of a cylinder around the z axis, bottom radius: 1, length: 1, origin: (0,0,0), resolution: 50
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Cylinder200">
      <summary>
            Creates the hull of a cylinder around the z axis, bottom radius: 1, length: 1, origin: (0,0,0), resolution: 200
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Point">
      <summary>
            Get single point shape at (0,0,0), single colored: red
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Line">
      <summary>
            Get single line shape at (0,0,0) -&gt; (1,1,1), single colored: black
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleWireframe">
      <summary>
            Gets isosceles triangle wireframe as line strip, single colored: black
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleEquilateralWireframe">
      <summary>
            Gets equilateral triangle wireframe as line strip, single colored: black
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Triangle">
      <summary>
            Gets isosceles triangle, single colored: blue, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleEquilateral">
      <summary>
            Get equilateral (even sided) triangle, single colored: blue, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleRight">
      <summary>
            Get isosceles triangle, right angle at origin, single colored: blue, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleInterp">
      <summary>
            Gets isosceles triangle, individual colors, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleEquilateralInterp">
      <summary>
            Get equilateral (even sided) triangle, individual colors, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleRightInterp">
      <summary>
            Get isosceles triangle, right angle at origin, individual colors, unlit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleLit">
      <summary>
            Gets isosceles triangle, single colored: blue, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleEquilateralLit">
      <summary>
            Get equilateral (even sided) triangle, single colored: blue, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleRightLit">
      <summary>
            Get isosceles triangle, right angle at origin, single colored: blue, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleInterpLit">
      <summary>
            Gets isosceles triangle, individual colors, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleEquilateralInterpLit">
      <summary>
            Get equilateral (even sided) triangle, individual colors, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.TriangleRightInterpLit">
      <summary>
            Get isosceles triangle, right angle at origin, individual colors, lit
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.UnitCubeWireframe">
      <summary>
            Create unit cube wireframe: (0,0,0) -&gt; (1,1,1)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.UnitCubeFilled">
      <summary>
            Create filled unit cube: (0,0,0) -&gt; (1,1,1) (shared vertices)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.UnitCubeFilledLit">
      <summary>
            Create filled unit cube: (0,0,0) -&gt; (1,1,1) (optimized for lighting)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.RectangleWireframe">
      <summary>
            Create rectangle in XY plane: (0,0),(0,1),(1,1),(1,0)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.RectangleFilled">
      <summary>
            Create filled rectangle in XY plane: (0,0) -&gt; (1,1)
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear2">
      <summary>
            Gets a gear triangle shape with 2 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear5">
      <summary>
            Gets a gear triangle shape with 5 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear10">
      <summary>
            Gets a gear triangle shape with 10 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear15">
      <summary>
            Gets a gear triangle shape with 15 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear25">
      <summary>
            Gets a gear triangle shape with 25 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear2Wireframe">
      <summary>
            Gets a gear wireframe line shape with 2 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear5Wireframe">
      <summary>
            Gets a gear wireframe line shape with 5 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear10Wireframe">
      <summary>
            Gets a gear wireframe line shape with 10 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear15Wireframe">
      <summary>
            Gets a gear wireframe line shape with 15 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.Drawing.Shapes.Gear25Wireframe">
      <summary>
            Gets a gear wireframe line shape with 25 tooths
            <para>[ILNumerics Visualization Engine]</para>
      </summary>
      <remarks>
        <para>[ILNumerics Visualization Engine]</para>
      </remarks>
    </member>
    <member name="F:ILNumerics.Drawing.Triangle.ClipPlaneChecked">
      <summary>
            internal flag storing, which clip planes have been checked for the triangle already 
            </summary>
    </member>
  </members>
</doc>
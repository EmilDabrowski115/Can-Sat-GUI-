<doc>
  <assembly>
    <name>ILNumerics.IO.HDF5</name>
  </assembly>
  <members>
    <member name="T:ILNumerics_Licensing.ILLicHelper_b68e47501b0a4110894233a73cc45be6_">
      <summary>
            This type supports ILNumerics infrastructure. Do not edit the code!
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>This type is automatically generated by ILNumerics Ultimate VS. If you encounter problems compiling this file, make sure to reference ILNumerics.Core in your project!<para>[ILNumerics HDF5 Module]</para></remarks>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_ERROR">
      <summary>
            No filter	
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_NONE">
      <summary>
            reserved indefinitely
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_DEFLATE">
      <summary>
            deflation like gzip
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_SHUFFLE">
      <summary>
            shuffle the data
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_FLETCHER32">
      <summary>
            fletcher32 checksum of EDC
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_SZIP">
      <summary>
            szip compression
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_NBIT">
      <summary>
            nbit compression
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_SCALEOFFSET">
      <summary>
            scale+offset compression
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_RESERVED">
      <summary>
            filter ids below this value are reserved for library use
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_FILTER_MAX">
      <summary>
            maximum filter id
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SHUFFLE_USER_NPARMS">
      <summary>
            Number of parameters that users can set
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SHUFFLE_TOTAL_NPARMS">
      <summary>
            Total number of parameters for filter
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_USER_NPARMS">
      <summary>
            Number of parameters that users can set
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_TOTAL_NPARMS">
      <summary>
            Total number of parameters for filter
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_PARM_MASK">
      <summary>
            "User" parameter for option mask
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_PARM_PPB">
      <summary>
            "User" parameter for pixels-per-block
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_PARM_BPP">
      <summary>
            "Local" parameter for bits-per-pixel
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SZIP_PARM_PPS">
      <summary>
            "Local" parameter for pixels-per-scanline
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_NBIT_USER_NPARMS">
      <summary>
            Number of parameters that users can set
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SCALEOFFSET_USER_NPARMS">
      <summary>
            Number of parameters that users can set
            </summary>
    </member>
    <member name="F:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_SO_INT_MINBITS_DEFAULT">
      <summary>
            Special parameters for ScaleOffset filter
            </summary>
    </member>
    <member name="T:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_filter_func_t">
      <summary>
            Filter callback function definition
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="filter"></param>
      <param name="buf"></param>
      <param name="buf_size"></param>
      <param name="op_data"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.Layer_I.H5Z.H5Z_cb_t">
      <summary>
            Structure for filter callback property
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5ObjectTypes">
      <summary>
            All available HDF5 object types for ILNumerics.IO.HDF5
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5LinkType">
      <summary>
            Link types available
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5Compression">
      <summary>
            Enum with all compression methods available
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5Dataset">
      <summary>
            A representation of a dataset stored in an HDF5 file
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Object.Path">
      <summary>
            Unique object identifier, commonly the absolute path to the object in the HDF5 file
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Object.Name">
      <summary>
            Gets the local name of the object, i.e. the last segment from the absolute path
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Dataset.Get``1(ILNumerics.ILBaseArray[])">
      <summary>
            Retrieve (sub-)array from dataset
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <typeparam name="T">The type of the elements to be returned</typeparam>
      <param name="range">[optional] subarray range specification</param>
      <returns>Array or subarray of the specified type <typeparamref name="T" /> and the size as determined by <paramref name="range" /></returns>
      <remarks>
        <para>This function is used to retrieve an array from the dataset or parts of the dataset. The <paramref name="range" /> 
            parameter is used to define the range to request. If <paramref name="range" /> is ommited, the whole dataset is retrieved and its 
            data returned as ILNumerics array.</para>
        <para>The type of the elements for the array returned is specified by the generic parameter <typeparamref name="T" />. Note that <typeparamref name="T" />
            does not need to match the actual type of the elements stored in the dataset. HDF5 will convert between compatible types automatically.</para>
        <para>As <paramref name="range" /> parameter all options for addressing subarrays from ILArrays are allowed. This includes any combination of 
            ranged dimension specifiers, stepped ranges (increasing or decreasing), combined dimension specifiers and sequential indices. If <paramref name="range" />
            contains a single numeric array of arbitrary shape, its elements are interpreted as sequential indices into the dataset. Read all details about subarray 
            addressing options in the <a href="http://ilnumerics.net/Subarray0.html">ILNumerics Subarray Tutorial.</a></para>
        <para>A note on performance: ILNumerics uses <a href="http://www.hdfgroup.org/HDF5/Tutor/select.html">hyperslab selections</a> from HDF5 in order to 
            retrieve subarrays from datasets. This allows one to read parts of the dataset without accessing the whole dataset. For large datasets using hyperslab 
            selections can drastically reduce the memory requirements and therefore improve the performance of the retrieval. </para>
        <para>In order to use the hyperslab feature of HDF5, no actions are neccessary from the ILNumerics side. ILNumerics automatically translates the subarray 
            specification given by <paramref name="range" /> into corresponding hyperslab selections. However, since the way hyperslabs work is not 100% compatible with 
            ILNumerics' subarray features, the conversion and highly efficient subarry access is only possible for certain subarray range specifications. See the 
            ILNumerics <a href="http://ilnumerics.net/hdf5-datasets.html">HDF5 online manual</a> for a comprehensive list of all conditions.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
      <seealso cref="!:http://ilnumerics.net/hdf5-datasets.html" />
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Dataset.Set(ILNumerics.ILBaseArray,ILNumerics.ILBaseArray[])">
      <summary>
            Alter the existing data stored in the file or parts of it
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="A">Data used to overwrite the existing data with</param>
      <param name="range">[optional] Definition of the area in the existing data to overwrite. A good subset of the full ILNumerics subarray feature set is allowed.</param>
      <remarks>
        <para>If the optional argument <paramref name="range" /> is omitted, <paramref name="A" /> will replace the whole existing data and the 
            size of the existing array is adjusted to match the size of <paramref name="A" />.</para>
        <para>While the rank of <paramref name="range" /> (i.e. the number of dimensions addressed by range) must match the rank of the array stored, the size of <paramref name="A" /> 
            does not need to have the same rank. However, the number of elements addressed by <paramref name="range" /> must be <b>lower than or equal to</b> the number of elements stored in A. 
            If A contains more elements than addresseb by range, subsequent elements in A will be ignored.</para>
        <para>If range fully or partly addresses an area of the dataset which lays outside of the current dimension size(s) of the dataset, the dataset will be expanded just as much 
            that A can be stored in the addressed region. The length of dimensions not affected by the expansion will stay untouched.</para>
        <para>If <paramref name="range" /> is given, it is used to describe that part of the existing array in the file which will be overwritten with the values in A. The 
            HDF5 hyperslab feature is used for that. Therefore, the range specification must be compatible with the capabilities of the HDF5 hyperslab feature. Otherwise, an 
            <see cref="T:System.ArgumentException" /> is thrown. Consult the ILNumerics HDF5 online manual for all options of valid range specifications.</para>
        <para>Note that the requirements on the <paramref name="range" /> parameter are higher than for <see cref="M:ILNumerics.IO.HDF5.H5Dataset.Get``1(ILNumerics.ILBaseArray[])" /> since using hyperslabs is the <b>only</b> 
            way of dealing with partial writes to HDF datasets here: for <see cref="M:ILNumerics.IO.HDF5.H5Dataset.Get``1(ILNumerics.ILBaseArray[])" />, if the range was not compatible, we could fetch the complete array and derive the 
            subarray in memory using the full spectrum of ILNumerics subarray features. For <see cref="!:Set&lt;T&gt;(ILBaseArray, ILBaseArray[])" /> one might argue that we could 
            go the same way: fetch the whole array, manipulate in memory and write it back to the dataset. However, this is not easily applicable, since 
            in order to fetch the array, we would need to define a <b>type</b> for its elements. Set, on the other side does not request/provide a type. This limitation might 
            get removed in a future version of ILNumerics.IO.HDF5 by constructing the element type out of the actual type stored in the dataset.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
      <seealso cref="!:http://ilnumerics.net/hdf5-datasets.html" />
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Dataset.ClearCache">
      <summary>
            clear property caches, causes re-acquisition from file at next read
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Dataset.#ctor(System.String,ILNumerics.ILBaseArray,System.Object,ILNumerics.IO.HDF5.H5Compression,System.UInt32)">
      <summary>
             Creates a new dataset. Optionally define additional parameters.
             <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">The name for the dataset</param>
      <param name="data">Initial data to be stored into the dataset. This will define and fix the chunk size used!</param>
      <param name="fillValue">[Optional] Fill value used when expanding the dataset; Default: default value for the datatype is determined by the HDF5 libary.</param>
      <param name="compression">[Optional] Compression method used for the dataset; Default: None.</param>
      <param name="compParameter">[Optional] Additional parameter used for the configuration of the compression; specific for each compression method. Ignored if <paramref name="Compression" /> is <see cref="F:ILNumerics.IO.HDF5.H5Compression.None" />. Default: 8</param>
      <remarks>
        <para>The dataset is only created in memory. Its creation in a file is delayed until the dataset is added to a group attached to the file.</para>
        <example>
          <code>using (var f = new H5File(fname)) {
                // create new dataset with the name "uniqueName", provide initial data and add to root group
                f.Add(new H5Dataset("uniqueName",ILMath.ones(10,20)); 
            }</code>
        </example>
        <para>Datasets in ILNumerics are always created chunked! The chunk size is implicitly derived from the initial data used.</para>
        <para>If a <paramref name="fillValue" /> is given, its type must match the element type of <paramref name="data" />. If the type of 
             <paramref name="fillValue" /> does not match the element type, the behavior is undefined. Default values given by HDF5 will usually create 
             0 (zero) for all elementary scalar value datatypes.</para>
        <para></para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.Size">
      <summary>
            Gets the current size of the dataset [readonly]
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>The size corresponds to the length of any dimension currently stored into the dataset. The dimension length may change 
            for existing datasets until <see cref="P:ILNumerics.IO.HDF5.H5Dataset.MaxSize" /> is reached. ILNumerics does not requires you to change
            dimensions explicitly. Rather, one uses the <see cref="!:Set&lt;T&gt;" /> function in order to expand datasets automatically.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.MaxSize">
      <summary>
            The maximum dimension sizes configured [readonly]
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>This value gives the maximum lenght for each dimension the dataset can be expanded to. The maximum length is configured at the time the dataset was created. It cannot be changed afterwards.<para>[ILNumerics HDF5 Module]</para></remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.Compression">
      <summary>
            Gets the compression method configured for the dataset [readonly]
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>This parameter reflects the compression setting defined at the time this dataset was created. It cannot get changed 
            for existing datasets. 
            <para>The following compression methods are available for H5Datasets in ILNumerics: 
            <list type="bullets"><item>Deflate compression algorithm (gzip): values for <see cref="P:ILNumerics.IO.HDF5.H5Dataset.CompressionParameter" /> give the level of compression. Valid parameter values range from 0 [no compression] to 9 [strongest compression].</item><item>SZIP compression algorithm: the value of <see cref="P:ILNumerics.IO.HDF5.H5Dataset.CompressionParameter" /> gives the pixels per block/ block size used for compression</item></list></para><para>Additional information is found in the HDF5 documentation: <a href="http://www.hdfgroup.org/HDF5/doc/RM/RM_H5P.html#Property-SetSzip">Property Set:Szip</a> and <a href="http://www.hdfgroup.org/HDF5/doc/RM/RM_H5P.html#Property-SetDeflate">Property Set:Deflate</a></para><para>[ILNumerics HDF5 Module]</para></remarks>
      <seealso cref="!:http://www.hdfgroup.org/HDF5/Tutor/compress.html" />
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.CompressionParameter">
      <summary>
            Additional parameter for compression method [readonly]
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>This parameter reflects the setting defined at the time this dataset was created. It cannot get changed 
            for existing datasets. 
            <para>The meaning of the parameter changes with the type of compression used: 
            <list type="bullets"><item>Deflate compression algorithm: values for <paramref name="CompressionParameter" /> give the level of compression used for this dataset. Valid values range from 0 [no compression] to 9 [strongest compression].</item><item>SZIP compression algorithm: pixels per block/ block size used for compression;</item></list></para><para>Additional information is found in the HDF5 documentation: <see cref="!:www.hdfgroup.org/HDF5/doc/RM/RM_H5P.html#Property-SetSzip" /> and <see cref="!:http://www.hdfgroup.org/HDF5/doc/RM/RM_H5P.html#Property-SetDeflate" /></para><para>[ILNumerics HDF5 Module]</para></remarks>
      <seealso cref="!:http://www.hdfgroup.org/HDF5/Tutor/compress.html" />
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.H5Type">
      <summary>
            Gets the object type of this dataset. This will always return 'H5ObjectTypes.Dataset'.
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Dataset.Attributes">
      <summary>
            Gets access to the collection of attributes for this object.
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Attribute.Set(ILNumerics.ILBaseArray)">
      <summary>
            Alter the existing data stored in the file or parts of it
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="A">Data used to overwrite the existing data with</param>
      <remarks>
        <para>The value of <paramref name="A" /> will replace the whole existing attribute data and the 
            size of the attribute is adjusted to match the size of <paramref name="A" />.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Attribute.Get``1">
      <summary>
            Retrieve attribute value as array
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <typeparam name="T">The type as of which the elements should get returned</typeparam>
      <returns>Whole attribute array of the specified type <typeparamref name="T" /></returns>
      <remarks>
        <para>This function is used to retrieve the value from the attribute as ILNumerics array.</para>
        <para>The type of the elements for the array returned is specified by the generic parameter <typeparamref name="T" />. Note that <typeparamref name="T" />
            does not need to match the actual type of the elements stored in the attribute. HDF5 will convert between compatible types automatically.</para>
        <para>HDF5 attributes do not utilize partial I/O. This means, attribute values are completely retrieved from the attribute object in the HDF5 
            file - regardless if only a subset of the attribute value is needed by the user. However, since the value is returned as regular ILNumerics array, 
            all subarray options for ILNumerics arrays are available on the return value.</para>
        <para>This API corresponds to the expectation/recommendation for attribute values being rather small (compared 
            with regular dataset content). If you are working with large data and have the need for frequent access to only a part of it, consider using HDF5 datasets  
            instead. Their hyperslab feature may prevent from performance degradation.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Collection`1.Clear">
      <summary>
            Clears all objects in this collection - in memory AND FROM THE FILE!
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5DatasetCollection.Add(System.String,ILNumerics.ILBaseArray,ILNumerics.ILBaseArray,System.Type,System.Object)">
      <summary>
            Create a new dataset and add it to the current group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <typeparam name="T">Element type for the dataset; derived from data or fillvalue parameter</typeparam>
      <param name="name">The name used to identify the new dataset in the group. Names must be unique among all objects in a group.</param>
      <param name="data">Initial data array. This determines the space allocated initially in the file. This parameter cannot be null. </param>
      <param name="maxdims">[Optional] Maximum sizes for all dimensions the hdf5 file can grow. Default: unlimited.</param>
      <param name="datatype">[Optional] Datatype used to store elements in the HDF5 file. If defined, this will override the datatype defined by <paramref name="data" />.</param>
      <param name="fillvalue">[Optional] Fillvalue used for undefined element values. Default: the default fill value defined by the HDF5 library (commonly: 0) will be used.</param>
      <remarks>
        <para>This method creates a new dataset in the current group and use it to store the array given by the <paramref name="data" /> parameter.</para>
        <para>Datasets are always created as chunked datasets. By default, all existing datasets are expandable. In order to limit the maximum size for the dimensions of a dataset, 
            the <paramref name="maxdims" /> parameter allows the definition of maximum dimension length. <paramref name="maxdims" /> expects a one dimensional array (vector) of any 
            numeric type with the maximum dimension length for every existing dimension. Only those dimensions will be considered, which exist in both: <paramref name="maxdims" />
            and <paramref name="data" />. Unspecified dimensions are set to unlimited lenght. In order to mark a dimension as unlimited, a value of -1 (ILNumerics.HDF5.Layer_I.H5S.Unlimited) must be used for the corresponding entry in <paramref name="maxdims" />.
            By default, <paramref name="maxdims" /> is null which indicates unlimited length for all dimensions. </para>
        <para>Fill value: Leave this parameter at its default (null) in order to have HDF5 use the default fill value. In most cases this will cause 0 (zero) to be used. 
            </para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Datatype.Attributes">
      <summary>
            Access to the collection of attributes for this object
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5File">
      <summary>
            H5File represents a HDF5 file. It is the root object used to access and manage all features in ILNumerics.IO.HDF5.
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>See the online manual for examples and HowTos: <a href="http://ilnumerics.net/hdf5-interface.html">http://ilnumerics.net/hdf5-interface.html</a><para>[ILNumerics HDF5 Module]</para></remarks>
      <seealso cref="T:ILNumerics.IO.HDF5.H5Group" />
      <seealso cref="T:ILNumerics.IO.HDF5.H5Dataset" />
      <seealso cref="T:ILNumerics.IO.HDF5.H5Link" />
    </member>
    <member name="T:ILNumerics.IO.HDF5.H5Group">
      <summary>
            H5Group represents groups in HDF5 files
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.#ctor(ILNumerics.IO.HDF5.H5File,System.String)">
      <summary>
            Creates a new group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="file">a valid file object</param>
      <param name="path">a valid path string</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.#ctor(System.String)">
      <summary>
            Create a new empty group for adding to an HDF5 file
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">The name of the new group. Allowed: single name identifier, absolute or relative paths</param>
      <remarks>
        <para>
            The name may be specified as a single name identifier, consisting out of chars, digits and underscores. A new group with that name will be created.</para>
        <para>If the name contains slashes '/', it will be interpreted as path, having several groups involved. If the path begins with a slash '/' it is taken 
            as an absolute path, otherwise it is interpreted as a relative path. Absolute paths always refer to the root group of the HDF5 file.</para>
        <para>If an relative path is given, it refers to the group node, this newly created node is going to be added to.</para>
        <para>Creating a new H5Group does not lead to the immediate creation of a new object in the HDF5 file! The file is only altered, as soon 
            as the new object is added to any group, already existing in the HDF5 file.</para>
        <example>
          <code>using (var file = new H5File("filename.h")) {
                var group = new H5Group("g1"); // this will only create a small proxy group object
                file.Add(group); // a new group with the path /g1 will actually get created in the HDF5 file here
                file.Add(                      // adding the /g2 group to the file will alter the HDF5 file   
                    new H5Group("g2") {        // create a new group relative to the root node: /g2
                        new H5Group("g3"),     // create a new group in g2: /g2/g3
                        new H5Group("g4/g5"),  // create 2 new groups: /g2/g4 and /g2/g4/g5
                                               // if an absolute path is given, the position of the new group in the node tree is ignored: 
                        new H5Group("/base1/base2")  // creates /base1/base2  (instead of /g2/base1/base2 !)
                    });
            }
            </code>
        </example>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.Remove(System.String)">
      <summary>
            Removes an object from the node
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">The path used to reference the object, relative or absolute paths allowed.</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.Add(ILNumerics.IO.HDF5.H5Object)">
      <summary>
            Adds a new object to the file this group is in, if such an object does not already exist
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="item">Object to get added</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:ILNumerics.IO.HDF5.H5Group.Get``1(System.String)" -->
    <member name="M:ILNumerics.IO.HDF5.H5Group.NewDataset(System.String,ILNumerics.ILBaseArray,ILNumerics.ILBaseArray,System.Type,System.Object,ILNumerics.IO.HDF5.H5Compression,System.UInt32)">
      <summary>
            Create a new dataset and add it to the current group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="linkName">The name used to identify the new dataset in the group. Names must be unique among all objects in a group.</param>
      <param name="data">Initial data array. This determines the space allocated initially in the file. This parameter cannot be null. </param>
      <param name="maxdims">[Optional] Maximum sizes for all dimensions the hdf5 file can grow. Default: unlimited.</param>
      <param name="datatype">[Optional] Datatype used to store elements in the HDF5 file. If defined, this will override the datatype defined by <paramref name="data" />.</param>
      <param name="fillvalue">[Optional] Fillvalue used for undefined element values. Default: the default fill value defined by the HDF5 library (commonly: 0) will be used.</param>
      <param name="compression">[Optional] Compression method used for the dataset; Default: None.</param>
      <param name="compParameter">[Optional] Additional parameter used for the configuration of the compression. Ignored if <paramref name="Compression" /> is <see cref="F:ILNumerics.IO.HDF5.H5Compression.None" />; default: 8</param>
      <remarks>
        <para>This method creates a new dataset in the current group and uses it to store the array given by the <paramref name="data" /> parameter.</para>
        <para>Datasets are always created as chunked datasets. By default, all existing datasets are expandable. In order to limit the maximum size for the dimensions of a dataset, 
            the <paramref name="maxdims" /> parameter allows the definition of maximum dimension length. <paramref name="maxdims" /> expects a one dimensional array (vector) of any 
            numeric type with the maximum dimension length for every existing dimension. Only those dimensions will be considered, which exist in both: <paramref name="maxdims" />
            and <paramref name="data" />. Unspecified dimensions are set to unlimited length. In order to explicitly mark a dimension as being 'unlimited', a value of -1 (<see cref="!:ILNumerics.IO.HDF5.Layer_I.H5S.Unlimited" />) must be used for the corresponding entry in <paramref name="maxdims" />.
            By default, <paramref name="maxdims" /> is null which indicates unlimited length for all dimensions. </para>
        <para>Fill value: Leave this parameter at its default (<c>null</c>) in order to have HDF5 use the default fill value. In most cases this will cause 0 (zero) to be used. 
            </para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.HardLink(System.String,System.String)">
      <summary>
            Create a new hardlink to an existing object
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">Name for the new hardlink</param>
      <param name="destinationPath">valid path to the existing destination object</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.HardLink(System.String,ILNumerics.IO.HDF5.H5Object)">
      <summary>
            Create a new hardlink for a new object
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">The name for the new hardlink</param>
      <param name="obj">The new object to link to</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.SoftLink(System.String,System.String)">
      <summary>
            Create a new softlink to an existing object
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="linkname">The name for the new softlink</param>
      <param name="targetPath">A valid path to the existing object</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5Group.NewGroup(System.String)">
      <summary>
            Creates a new group node
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="linkName">name for the new group</param>
      <returns>the newly created group</returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.Attributes">
      <summary>
            Access to the collection of attributes for this object
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.H5Type">
      <summary>
            The type of the node: H5NodeTypes.Group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.Datasets">
      <summary>
            Gets the collection of datasets contained within this group node by walking the subtree recursively
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.Datatypes">
      <summary>
            Gets a collection of all data type definitions within the subtree below this group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.Groups">
      <summary>
            Gets a collection of all groups contained within the subtree below this group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5Group.Item(System.String)">
      <summary>
            Gets an object by name / key or creates a hardlink to it
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="name">the name / key / path used to reference the object</param>
      <returns>the object referenced by <paramref name="name" /> or null if no such object was found</returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5File.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.Int64)">
      <summary>
            Create a new H5File object corresponding to a HDF5 file
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="filename">filename</param>
      <param name="openMode">[Optional] FileMode used to open the file. Default: OpenOrCreate</param>
      <param name="accessMode">[Optional] FileAccess mode determining if the file is to be read from and/or written to. Default: ReadWrite</param>
      <param name="userblockLength">[Optional] Reserve a free space at the beginning of the HDF5 file for custom applications. Default: no free space reserved.</param>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5File.Dispose">
      <summary>
            Flushes any unwritten data and closes the underlying HDF5 file. This method does not delete any data from the HDF5 file.
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>After the <see cref="T:ILNumerics.IO.HDF5.H5File" /> has been disposed, it cannot be used to access the underlying file anymore. Hence, calling 
            Dispose should be the last action on a H5File.
            <para>It is recommended, to use the <code>using</code> construct on C# in order to handle creation and disposal of 
            <see cref="T:ILNumerics.IO.HDF5.H5File" /> objects.</para><example><code>using (var file = new H5File("myFile.h5")) {
                // access the file here...
                ILArray&lt;double&gt; A = file["path/to"].Datasets["myDataset1"].GetArray&lt;double&gt;(); 
                // ...
                
                // once the using block is left, file will be disposed automatically. 
                // Hence, there is no need to call file.<see cref="M:ILNumerics.IO.HDF5.H5File.Dispose" /> explicitly. 
            }
            </code></example><para>[ILNumerics HDF5 Module]</para></remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.H5File.ToString">
      <summary>
            Gives a short string representation for this HDF5 file.
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <returns></returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5File.ID">
      <summary>
            The file ID used to identify the connection to the underlying HDF5 file; readonly
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="P:ILNumerics.IO.HDF5.H5File.Filename">
      <summary>
            The filename of the underlying H5F file. This must  be a relative or absolute file path. (readonly)
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>The filename reflects the name of the underlying HDF5 file. The value of this property is set 
            in the constructor of <see cref="T:ILNumerics.IO.HDF5.H5File" />.</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.CombinePath(System.String,System.String)">
      <summary>
            Combine two path fragments
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="path">First path fragment</param>
      <param name="path2">Second path fragment</param>
      <returns>The combined path</returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.GetNameFromAttributePath(System.String)">
      <summary>
            Extract the name segment from a the path string used on an attribute
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="path">Attribute path</param>
      <returns>Name of the attribute</returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.Find``1(ILNumerics.IO.HDF5.H5Group,System.String,System.Boolean,System.Boolean,System.Predicate{``0})">
      <summary>
            Finds any matching object among the children of this group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <typeparam name="TObjT">The (H5-) type of the object to search and return</typeparam>
      <param name="root">the current root node of the set of children to search in</param>
      <param name="key">[optional] if specified: the search term to filter the objects by Name; default: match any name</param>
      <param name="recursive">[optional] if true: searches for objects recursively in the children of the current group. Default: true</param>
      <param name="includeAttributes">[optional] if true: consider attributes as regular nodes, apply any matching rules to them; default: false</param>
      <param name="predicate">[optional] if specified: the filter function used to determine a match; default: match any object</param>
      <returns>Enumerable with all objects of type <typeparamref name="TObjT" /> matching all filter criteria defined</returns>
      <remarks>
        <para>This method allows the efficient retrieval of specific objects from the tree of H5Objects below an HDF5 group. The optional filter arguments may be used  
            to delimit the set of considered objects. If used without any optional filter rules, <c>Find()</c> returns all the objects of the given type <typeparamref name="TObjT" /> 
            within the group or its children, which matches the type <typeparamref name="TObjT" />.</para>
        <para>No slashes are allowed for key.</para>
        <para>Search order: if <paramref name="recursive" /> is false, the children of the group are walked by the increasing order of their (HDF5) indices. 
            That index is assigned by the HDF5 library at the time, the object was created in the file and added to the group. If <paramref name="recursive" /> is true (default)
            the subtree below <paramref name="root" /> is traversed in breadth-first order, i.e.: the root is visited before the children are visited, afterwards the children of the children a.s.o.</para>
        <para>
          <c>Find()</c> does currently not handle cyclic references! Using <c>Find()</c> on files which contain cyclic references may 
            cause infinitely looping over the cycle, hence does never return!</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
      <example>In order to find the first dataset in the HDF5 file 'example.h5' with the name 'dset1': 
            <code>using (var file = new H5File("example.h5")) {
                var dset = file.First&lt;H5Dataset&gt;("dset1");
                // do something with the dataset... read the data into an array:
                ILArray&lt;double&gt; A = dset.Get&lt;double&gt;(); 
                // ... 
            }</code>
            
            In order to return all direct children of the first group named "group1" below this group: 
            <code>using (var file = new H5File("example.h5")) {
                var children = file.First&lt;H5Group&gt;("group1").Find&lt;H5Object&gt;(recursive: false);
                // ... 
            }</code>
            
            To find all datasets which contain "set" in the name: 
            <code>using (var file = new H5File("example.h5")) {
                foreach (var ds in file.Find&lt;H5Dataset&gt;("set")) {
                    // do something with the dataset ds ... read the data into an array:
                    ILArray&lt;double&gt; A = ds.Get&lt;double&gt;(); 
                    // ... 
                }
            }</code>
            
            Get a list of the absolute paths of all objects below the 'root' group node: 
            <code>using (var file = new H5File("example.h5")) {
                // H5Object is the base type of all common HDF5 objects in ILNumerics
                foreach (var obj in file.Find&lt;H5Object&gt;()) { 
                    // write the absolute path of the object
                    Console.WriteLine(obj.Path);  
                }
            }</code></example>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.First``1(ILNumerics.IO.HDF5.H5Group,System.String,System.Boolean,System.Boolean,System.Predicate{``0})">
      <summary>
            Find and return the first matching object from the children of this group
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <typeparam name="ObjT">The (H5-) type of the object to search and return</typeparam>
      <param name="root">the current root node of the set of children to search in</param>
      <param name="key">[optional] if specified: the search term to filter the Name of the objects; default: match any name</param>
      <param name="recursive">[optional] true: search for the object recursively in the children of the current group. Default: true</param>
      <param name="includeAttributes">[optional] true: consider attributes as regular nodes, apply any matching rules to them; default: false</param>
      <param name="predicate">[optional] if specified: the filter function used to determine a match; default: match any object</param>
      <returns>The first object matching all filters defined and the type of ObjT</returns>
      <remarks>
        <para>This method allows the efficient retrieval of a specific object from a tree of H5Objects. The optional filter arguments may be used in order 
            to delimit the set of considered objects. If used without any optional filter rules, <c>First()</c> returns the first object within the group or its children, 
            which matches the type <c>ObjT</c>.</para>
        <para>
          <c>First()</c> returns null, if no matching object was found.</para>
        <para>No slashes are allowed for key.</para>
        <para>Search order: if <paramref name="recursive" /> is false, the children of the group are searched in the increasing order of their (HDF5) indices. 
            That index is assigned by the HDF5 library at the time, the object was created in the file and added to the group. If <paramref name="recursive" /> is true
            the subtree below <paramref name="root" /> is traversed in breadth-first order, i.e.: the children of group are visited first, afterwards the children of the children a.s.o.</para>
        <para>
          <c>First()</c> is based on <c>Find()</c> which does currently not handle cyclic references! Using <c>First()</c> on files which contain cyclic references may 
            cause infinitely looping over the cycle, hence does not return anything!</para>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
      <example>In order to find the first dataset in the HDF5 file 'example.h5' with the name 'dset1': 
            <code>
            using (var file = new H5File("example.h5")) {
                var dset = file.First&lt;H5Dataset&gt;("dset1");
                // do something with the dataset... read the data into an array:
                ILArray&lt;double&gt; A = dset.Get&lt;double&gt;(); 
                // ... 
            }</code></example>
      <example>In order to return all direct children of the first group named "group1" below this group: 
            <code>
            using (var file = new H5File("example.h5")) {
                var children = file.First&lt;H5Group&gt;("group1").Find&lt;H5Object&gt;(recursive: false);
                // ... 
            }</code></example>
      <example>To find all datasets which contain "set" in the name: 
            <code>
            using (var file = new H5File("example.h5")) {
                foreach (var ds in file.Find&lt;H5Dataset&gt;("set")) {
                    // do something with the dataset ds ... read the data into an array:
                    ILArray&lt;double&gt; A = ds.Get&lt;double&gt;(); 
                    // ... 
                }
            }</code></example>
      <example>Get a list of the absolute paths of all objects below the 'root' group node: 
            <code>
            using (var file = new H5File("example.h5")) {
                // H5Object is the base type of all common HDF5 objects in ILNumerics
                foreach (var obj in file.Find&lt;H5Object&gt;()) { 
                    // write the absolute path of the object
                    Console.WriteLine(obj.Path);  
                }
            }</code></example>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.GetH5ID(ILNumerics.IO.HDF5.H5Object)">
      <summary>
            Retrieves the object ID used to identify the object within the HDF5 file
            ///
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="obj"></param>
      <returns></returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="M:ILNumerics.IO.HDF5.Helper.GetObject(ILNumerics.IO.HDF5.H5File,System.String)">
      <summary>
            Retrieve an object by absolute path
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <param name="file">the file</param>
      <param name="absPath">absolute path of the object to retrieve</param>
      <returns>The object found or null.</returns>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.Layer_I.H5O.type_t">
            * Maximum shared message values.  Number of indexes is 8 to allow room to add
        </member>
    <member name="T:ILNumerics.IO.HDF5.Layer_I.H5.H5IterationResult">
      <summary>
             Enumeration type returned from iteration function
              (HALT_WITH_FAILURE, SUCCESS, SHORT_CIRCUIT_SUCCESS).
             <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
    <member name="T:ILNumerics.IO.HDF5.Layer_I.ILH5DLLImporter">
      <summary>
            Helper class used to fetch public variables (e.g. native type values) exported by HDF5 dll
            <para>[ILNumerics HDF5 Module]</para>
      </summary>
      <remarks>
        <para>[ILNumerics HDF5 Module]</para>
      </remarks>
    </member>
  </members>
</doc>